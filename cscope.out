cscope 15 $HOME/brench -q 0000000479 0000071289
	@cJSON.c

26 
	~<°rög.h
>

27 
	~<°dio.h
>

28 
	~<m©h.h
>

29 
	~<°dlib.h
>

30 
	~<Êﬂt.h
>

31 
	~<limôs.h
>

32 
	~<˘y≥.h
>

33 
	~<°ddef.h
>

34 
	~"cJSON.h
"

36 c⁄° *
	gï
;

38 c⁄° *
	$cJSON_GëEº‹På
(Ë{ 
ï
;
	}
}

40 
	$cJSON_°rˇ£cmp
(c⁄° *
s1
,c⁄° *
s2
)

42 i‡(!
s1
Ë (s1==
s2
)?0:1;if (!s2)  1;

43 ; 
	`tﬁowî
(*
s1
Ë=tﬁowî(*
s2
); ++s1, ++s2) if(*s1 == 0)  0;

44  
	`tﬁowî
(*(c⁄° *)
s1
Ë-Åﬁowî(*(c⁄° *)
s2
);

45 
	}
}

47 *(*
	gcJSON_mÆloc
)(
size_t
 
	gsz
Ë
mÆloc
;

48 (*
cJSON_‰ì
)(*
±r
Ë
‰ì
;

50 * 
	$cJSON_°rdup
(c⁄° * 
°r
)

52 
size_t
 
Àn
;

53 * 
c›y
;

55 
Àn
 = 
	`°æí
(
°r
) + 1;

56 i‡(!(
c›y
 = (*)
	`cJSON_mÆloc
(
Àn
)))  0;

57 
	`mem˝y
(
c›y
,
°r
,
Àn
);

58  
c›y
;

59 
	}
}

61 
	$cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
)

63 i‡(!
hooks
) {

64 
cJSON_mÆloc
 = 
mÆloc
;

65 
cJSON_‰ì
 = 
‰ì
;

69 
cJSON_mÆloc
 = (
hooks
->
mÆloc_‚
)?hooks->mÆloc_‚:
mÆloc
;

70 
cJSON_‰ì
 = (
hooks
->
‰ì_‚
)?hooks->‰ì_‚:
‰ì
;

71 
	}
}

74 
cJSON
 *
	$cJSON_New_Iãm
()

76 
cJSON
* 
node
 = (cJSON*)
	`cJSON_mÆloc
((cJSON));

77 i‡(
node
Ë
	`mem£t
“ode,0,(
cJSON
));

78  
node
;

79 
	}
}

82 
	$cJSON_Dñëe
(
cJSON
 *
c
)

84 
cJSON
 *
√xt
;

85 
c
)

87 
√xt
=
c
->next;

88 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
chûd
Ë
	`cJSON_Dñëe
(c->child);

89 i‡(!(
c
->
ty≥
&
cJSON_IsRe„ªn˚
Ë&& c->
vÆue°rög
Ë
	`cJSON_‰ì
(c->valuestring);

90 i‡(!(
c
->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& c->
°rög
Ë
	`cJSON_‰ì
(c->string);

91 
	`cJSON_‰ì
(
c
);

92 
c
=
√xt
;

94 
	}
}

97 c⁄° *
	$∑r£_numbî
(
cJSON
 *
ôem
,c⁄° *
num
)

99 
n
=0,
sign
=1,
sˇÀ
=0;
subsˇÀ
=0,
signsubsˇÀ
=1;

101 i‡(*
num
=='-'Ë
sign
=-1,num++;

102 i‡(*
num
=='0')Çum++;

103 i‡(*
num
>='1' && *num<='9'Ëdÿ
n
=(n*10.0)+(*num++ -'0'); *num>='0' && *num<='9');

104 i‡(*
num
=='.' &&Çum[1]>='0' &&Çum[1]<='9'Ë{num++; dÿ
n
=“*10.0)+(*num++ -'0'),
sˇÀ
--; *num>='0' && *num<='9');}

105 i‡(*
num
=='e' || *num=='E')

106 { 
num
++;i‡(*num=='+'Ënum++; i‡(*num=='-'Ë
signsubsˇÀ
=-1,num++;

107 *
num
>='0' && *num<='9'Ë
subsˇÀ
=(subscale*10)+(*num++ - '0');

112 
ôem
->
vÆuedoubÀ
=
n
;

113 
ôem
->
vÆueöt
=()
n
;

114 
ôem
->
ty≥
=
cJSON_Numbî
;

115  
num
;

116 
	}
}

118 
	$pow2gt
 (
x
Ë{ --x; x|=x>>1; x|=x>>2; x|=x>>4; x|=x>>8; x|=x>>16;  x+1; 
	}
}

120 °ru˘ {*
	mbuf„r
; 
	mÀngth
; 
	moff£t
; } 
	t¥ötbuf„r
;

122 * 
	$ísuª
(
¥ötbuf„r
 *
p
,
√eded
)

124 *
√wbuf„r
;
√wsize
;

125 i‡(!
p
 || !p->
buf„r
)  0;

126 
√eded
+=
p
->
off£t
;

127 i‡(
√eded
<=
p
->
Àngth
ËÖ->
buf„r
+p->
off£t
;

129 
√wsize
=
	`pow2gt
(
√eded
);

130 
√wbuf„r
=(*)
	`cJSON_mÆloc
(
√wsize
);

131 i‡(!
√wbuf„r
Ë{
	`cJSON_‰ì
(
p
->
buf„r
);p->
Àngth
=0,p->buffer=0; 0;}

132 i‡(
√wbuf„r
Ë
	`mem˝y
“ewbuf„r,
p
->
buf„r
,p->
Àngth
);

133 
	`cJSON_‰ì
(
p
->
buf„r
);

134 
p
->
Àngth
=
√wsize
;

135 
p
->
buf„r
=
√wbuf„r
;

136  
√wbuf„r
+
p
->
off£t
;

137 
	}
}

139 
	$upd©e
(
¥ötbuf„r
 *
p
)

141 *
°r
;

142 i‡(!
p
 || !p->
buf„r
)  0;

143 
°r
=
p
->
buf„r
+p->
off£t
;

144  
p
->
off£t
+
	`°æí
(
°r
);

145 
	}
}

148 *
	$¥öt_numbî
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
)

150 *
°r
=0;

151 
d
=
ôem
->
vÆuedoubÀ
;

152 i‡(
d
==0)

154 i‡(
p
Ë
°r
=
	`ísuª
(p,2);

155 
°r
=(*)
	`cJSON_mÆloc
(2);

156 i‡(
°r
Ë
	`°r˝y
(str,"0");

158 i‡(
	`Ábs
((()
ôem
->
vÆueöt
)-
d
)<=
DBL_EPSILON
 && d<=
INT_MAX
 && d>=
INT_MIN
)

160 i‡(
p
Ë
°r
=
	`ísuª
(p,21);

161 
°r
=(*)
	`cJSON_mÆloc
(21);

162 i‡(
°r
Ë
	`•rötf
(°r,"%d",
ôem
->
vÆueöt
);

166 i‡(
p
Ë
°r
=
	`ísuª
(p,64);

167 
°r
=(*)
	`cJSON_mÆloc
(64);

168 i‡(
°r
)

170 i‡(
	`Ábs
(
d
)<=
DBL_EPSILON
 && fabs(d)<1.0e60)
	`•rötf
(
°r
,"%.0f",d);

171 i‡(
	`Ábs
(
d
)<1.0e-6 || fabs(d)>1.0e9Ë
	`•rötf
(
°r
,"%e",d);

172 
	`•rötf
(
°r
,"%f",
d
);

175  
°r
;

176 
	}
}

178 
	$∑r£_hex4
(c⁄° *
°r
)

180 
h
=0;

181 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

182 
h
=h<<4;
°r
++;

183 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

184 
h
=h<<4;
°r
++;

185 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

186 
h
=h<<4;
°r
++;

187 i‡(*
°r
>='0' && *°r<='9'Ë
h
+=(*str)-'0'; if (*str>='A' && *str<='F') h+=10+(*str)-'A'; if (*str>='a' && *str<='f') h+=10+(*str)-'a';  0;

188  
h
;

189 
	}
}

192 c⁄° 
	gfú°ByãM¨k
[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };

193 c⁄° *
	$∑r£_°rög
(
cJSON
 *
ôem
,c⁄° *
°r
)

195 c⁄° *
±r
=
°r
+1;*
±r2
;*
out
;
Àn
=0;
uc
,
uc2
;

196 i‡(*
°r
!='\"'Ë{
ï
=str; 0;}

198 *
±r
!='\"' && *±∏&& ++
Àn
) if (*ptr++ == '\\')Ötr++;

200 
out
=(*)
	`cJSON_mÆloc
(
Àn
+1);

201 i‡(!
out
)  0;

203 
±r
=
°r
+1;
±r2
=
out
;

204 *
±r
!='\"' && *ptr)

206 i‡(*
±r
!='\\'Ë*
±r2
++=*ptr++;

209 
±r
++;

210 *
±r
)

212 'b': *
±r2
++='\b'; ;

213 'f': *
±r2
++='\f'; ;

214 'n': *
±r2
++='\n'; ;

215 'r': *
±r2
++='\r'; ;

216 't': *
±r2
++='\t'; ;

218 
uc
=
	`∑r£_hex4
(
±r
+1);ptr+=4;

220 i‡((
uc
>=0xDC00 && uc<=0xDFFF) || uc==0) ;

222 i‡(
uc
>=0xD800 && uc<=0xDBFF)

224 i‡(
±r
[1]!='\\' ||Ötr[2]!='u') ;

225 
uc2
=
	`∑r£_hex4
(
±r
+3);ptr+=6;

226 i‡(
uc2
<0xDC00 || uc2>0xDFFF) ;

227 
uc
=0x10000 + (((uc&0x3FF)<<10Ë| (
uc2
&0x3FF));

230 
Àn
=4;i‡(
uc
<0x80ËÀn=1;i‡(uc<0x800ËÀn=2;i‡(uc<0x10000ËÀn=3; 
±r2
+=len;

232 
Àn
) {

233 4: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

234 3: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

235 2: *--
±r2
 =((
uc
 | 0x80) & 0xBF); uc >>= 6;

236 1: *--
±r2
 =(
uc
 | 
fú°ByãM¨k
[
Àn
]);

238 
±r2
+=
Àn
;

240 : *
±r2
++=*
±r
; ;

242 
±r
++;

245 *
±r2
=0;

246 i‡(*
±r
=='\"')Ötr++;

247 
ôem
->
vÆue°rög
=
out
;

248 
ôem
->
ty≥
=
cJSON_Såög
;

249  
±r
;

250 
	}
}

253 *
	$¥öt_°rög_±r
(c⁄° *
°r
,
¥ötbuf„r
 *
p
)

255 c⁄° *
±r
;*
±r2
,*
out
;
Àn
=0,
Êag
=0;
tokí
;

257 
±r
=
°r
;*±r;±r++Ë
Êag
|=((*ptr>0 && *ptr<32)||(*ptr=='\"')||(*ptr=='\\'))?1:0;

258 i‡(!
Êag
)

260 
Àn
=
±r
-
°r
;

261 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

262 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

263 i‡(!
out
)  0;

264 
±r2
=
out
;*ptr2++='\"';

265 
	`°r˝y
(
±r2
,
°r
);

266 
±r2
[
Àn
]='\"';

267 
±r2
[
Àn
+1]=0;

268  
out
;

271 i‡(!
°r
)

273 i‡(
p
Ë
out
=
	`ísuª
(p,3);

274 
out
=(*)
	`cJSON_mÆloc
(3);

275 i‡(!
out
)  0;

276 
	`°r˝y
(
out
,"\"\"");

277  
out
;

279 
±r
=
°r
;(
tokí
=*±rË&& ++
Àn
Ë{i‡(
	`°rchr
("\"\\\b\f\n\r\t",token))Üen++; if (token<32)Üen+=5;ptr++;}

281 i‡(
p
Ë
out
=
	`ísuª
’,
Àn
+3);

282 
out
=(*)
	`cJSON_mÆloc
(
Àn
+3);

283 i‡(!
out
)  0;

285 
±r2
=
out
;
±r
=
°r
;

286 *
±r2
++='\"';

287 *
±r
)

289 i‡(()*
±r
>31 && *±r!='\"' && *±r!='\\'Ë*
±r2
++=*ptr++;

292 *
±r2
++='\\';

293 
tokí
=*
±r
++)

295 '\\': *
±r2
++='\\'; ;

296 '\"': *
±r2
++='\"'; ;

297 '\b': *
±r2
++='b'; ;

298 '\f': *
±r2
++='f'; ;

299 '\n': *
±r2
++='n'; ;

300 '\r': *
±r2
++='r'; ;

301 '\t': *
±r2
++='t'; ;

302 : 
	`•rötf
(
±r2
,"u%04x",
tokí
);ptr2+=5; ;

306 *
±r2
++='\"';*ptr2++=0;

307  
out
;

308 
	}
}

310 *
	$¥öt_°rög
(
cJSON
 *
ôem
,
¥ötbuf„r
 *
p
Ë{ 
	`¥öt_°rög_±r
(ôem->
vÆue°rög
,p);
	}
}

313 c⁄° *
∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

314 *
¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

315 c⁄° *
∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

316 *
¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

317 c⁄° *
∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
);

318 *
¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
);

321 c⁄° *
	$skù
(c⁄° *
ö
Ë{ö && *ö && ()*ö<=32Ëö++;  in;
	}
}

324 
cJSON
 *
	$cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
)

326 c⁄° *
íd
=0;

327 
cJSON
 *
c
=
	`cJSON_New_Iãm
();

328 
ï
=0;

329 i‡(!
c
)  0;

331 
íd
=
	`∑r£_vÆue
(
c
,
	`skù
(
vÆue
));

332 i‡(!
íd
Ë{
	`cJSON_Dñëe
(
c
); 0;}

335 i‡(
ªquúe_nuŒ_ãrmö©ed
Ë{
íd
=
	`skù
”nd);i‡(*ídË{
	`cJSON_Dñëe
(
c
);
ï
=end; 0;}}

336 i‡(
ªtu∫_∑r£_íd
Ë*ªtu∫_∑r£_íd=
íd
;

337  
c
;

338 
	}
}

340 
cJSON
 *
	$cJSON_P¨£
(c⁄° *
vÆue
Ë{ 
	`cJSON_P¨£WôhO±s
(vÆue,0,0);
	}
}

343 *
	$cJSON_Pröt
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,1,0);
	}
}

344 *
	$cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
Ë{ 
	`¥öt_vÆue
(ôem,0,0,0);
	}
}

346 *
	$cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
)

348 
¥ötbuf„r
 
p
;

349 
p
.
buf„r
=(*)
	`cJSON_mÆloc
(
¥ebuf„r
);

350 
p
.
Àngth
=
¥ebuf„r
;

351 
p
.
off£t
=0;

352  
	`¥öt_vÆue
(
ôem
,0,
fmt
,&
p
);

353  
p
.
buf„r
;

354 
	}
}

358 c⁄° *
	$∑r£_vÆue
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

360 i‡(!
vÆue
)  0;

361 i‡(!
	`°∫cmp
(
vÆue
,"nuŒ",4)Ë{ 
ôem
->
ty≥
=
cJSON_NULL
;  value+4; }

362 i‡(!
	`°∫cmp
(
vÆue
,"Ál£",5)Ë{ 
ôem
->
ty≥
=
cJSON_FÆ£
;  value+5; }

363 i‡(!
	`°∫cmp
(
vÆue
,"åue",4)Ë{ 
ôem
->
ty≥
=
cJSON_True
; iãm->
vÆueöt
=1;  value+4; }

364 i‡(*
vÆue
=='\"'Ë{  
	`∑r£_°rög
(
ôem
,value); }

365 i‡(*
vÆue
=='-' || (*vÆue>='0' && *vÆue<='9')Ë{  
	`∑r£_numbî
(
ôem
,value); }

366 i‡(*
vÆue
=='['Ë{  
	`∑r£_¨øy
(
ôem
,value); }

367 i‡(*
vÆue
=='{'Ë{  
	`∑r£_obje˘
(
ôem
,value); }

369 
ï
=
vÆue
; 0;

370 
	}
}

373 *
	$¥öt_vÆue
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

375 *
out
=0;

376 i‡(!
ôem
)  0;

377 i‡(
p
)

379 (
ôem
->
ty≥
)&255)

381 
cJSON_NULL
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"null"); ;}

382 
cJSON_FÆ£
: {
out
=
	`ísuª
(
p
,6); i‡(outË
	`°r˝y
(out,"false"); ;}

383 
cJSON_True
: {
out
=
	`ísuª
(
p
,5); i‡(outË
	`°r˝y
(out,"true"); ;}

384 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,
p
);;

385 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,
p
);;

386 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,
p
);;

387 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,
p
);;

392 (
ôem
->
ty≥
)&255)

394 
cJSON_NULL
: 
out
=
	`cJSON_°rdup
("null"); ;

395 
cJSON_FÆ£
: 
out
=
	`cJSON_°rdup
("false");;

396 
cJSON_True
: 
out
=
	`cJSON_°rdup
("true"); ;

397 
cJSON_Numbî
: 
out
=
	`¥öt_numbî
(
ôem
,0);;

398 
cJSON_Såög
: 
out
=
	`¥öt_°rög
(
ôem
,0);;

399 
cJSON_Aºay
: 
out
=
	`¥öt_¨øy
(
ôem
,
dïth
,
fmt
,0);;

400 
cJSON_Obje˘
: 
out
=
	`¥öt_obje˘
(
ôem
,
dïth
,
fmt
,0);;

403  
out
;

404 
	}
}

407 c⁄° *
	$∑r£_¨øy
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

409 
cJSON
 *
chûd
;

410 i‡(*
vÆue
!='['Ë{
ï
=value; 0;}

412 
ôem
->
ty≥
=
cJSON_Aºay
;

413 
vÆue
=
	`skù
(value+1);

414 i‡(*
vÆue
==']')  value+1;

416 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

417 i‡(!
ôem
->
chûd
)  0;

418 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value)));

419 i‡(!
vÆue
)  0;

421 *
vÆue
==',')

423 
cJSON
 *
√w_ôem
;

424 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

425 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

426 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

427 i‡(!
vÆue
)  0;

430 i‡(*
vÆue
==']')  value+1;

431 
ï
=
vÆue
; 0;

432 
	}
}

435 *
	$¥öt_¨øy
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

437 **
íåõs
;

438 *
out
=0,*
±r
,*
ªt
;
Àn
=5;

439 
cJSON
 *
chûd
=
ôem
->child;

440 
numíåõs
=0,
i
=0,
Áû
=0;

441 
size_t
 
tm∂í
=0;

444 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

446 i‡(!
numíåõs
)

448 i‡(
p
Ë
out
=
	`ísuª
(p,3);

449 
out
=(*)
	`cJSON_mÆloc
(3);

450 i‡(
out
Ë
	`°r˝y
(out,"[]");

451  
out
;

454 i‡(
p
)

457 
i
=
p
->
off£t
;

458 
±r
=
	`ísuª
(
p
,1);i‡(!±rË 0; *±r='[';Ö->
off£t
++;

459 
chûd
=
ôem
->child;

460 
chûd
 && !
Áû
)

462 
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,
p
);

463 
p
->
off£t
=
	`upd©e
(p);

464 i‡(
chûd
->
√xt
Ë{
Àn
=
fmt
?2:1;
±r
=
	`ísuª
(
p
,Àn+1);i‡(!±rË 0;*±r++=',';if(fmt)*±r++=' ';*±r=0;p->
off£t
+=len;}

465 
chûd
=chûd->
√xt
;

467 
±r
=
	`ísuª
(
p
,2);if (!ptr)  0; *ptr++=']';*ptr=0;

468 
out
=(
p
->
buf„r
)+
i
;

473 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

474 i‡(!
íåõs
)  0;

475 
	`mem£t
(
íåõs
,0,
numíåõs
*(*));

477 
chûd
=
ôem
->child;

478 
chûd
 && !
Áû
)

480 
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
+1,
fmt
,0);

481 
íåõs
[
i
++]=
ªt
;

482 i‡(
ªt
Ë
Àn
+=
	`°æí
‘ë)+2+(
fmt
?1:0); 
Áû
=1;

483 
chûd
=chûd->
√xt
;

487 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

489 i‡(!
out
Ë
Áû
=1;

492 i‡(
Áû
)

494 
i
=0;i<
numíåõs
;i++Ëi‡(
íåõs
[i]Ë
	`cJSON_‰ì
(entries[i]);

495 
	`cJSON_‰ì
(
íåõs
);

500 *
out
='[';

501 
±r
=
out
+1;*ptr=0;

502 
i
=0;i<
numíåõs
;i++)

504 
tm∂í
=
	`°æí
(
íåõs
[
i
]);
	`mem˝y
(
±r
,entries[i],tmplen);ptr+=tmplen;

505 i‡(
i
!=
numíåõs
-1Ë{*
±r
++=',';if(
fmt
)*ptr++=' ';*ptr=0;}

506 
	`cJSON_‰ì
(
íåõs
[
i
]);

508 
	`cJSON_‰ì
(
íåõs
);

509 *
±r
++=']';*ptr++=0;

511  
out
;

512 
	}
}

515 c⁄° *
	$∑r£_obje˘
(
cJSON
 *
ôem
,c⁄° *
vÆue
)

517 
cJSON
 *
chûd
;

518 i‡(*
vÆue
!='{'Ë{
ï
=value; 0;}

520 
ôem
->
ty≥
=
cJSON_Obje˘
;

521 
vÆue
=
	`skù
(value+1);

522 i‡(*
vÆue
=='}')  value+1;

524 
ôem
->
chûd
=chûd=
	`cJSON_New_Iãm
();

525 i‡(!
ôem
->
chûd
)  0;

526 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value)));

527 i‡(!
vÆue
)  0;

528 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

529 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

530 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

531 i‡(!
vÆue
)  0;

533 *
vÆue
==',')

535 
cJSON
 *
√w_ôem
;

536 i‡(!(
√w_ôem
=
	`cJSON_New_Iãm
()))  0;

537 
chûd
->
√xt
=
√w_ôem
;√w_ôem->
¥ev
=child;child=new_item;

538 
vÆue
=
	`skù
(
	`∑r£_°rög
(
chûd
,skip(value+1)));

539 i‡(!
vÆue
)  0;

540 
chûd
->
°rög
=chûd->
vÆue°rög
;child->valuestring=0;

541 i‡(*
vÆue
!=':'Ë{
ï
=value; 0;}

542 
vÆue
=
	`skù
(
	`∑r£_vÆue
(
chûd
,skip(value+1)));

543 i‡(!
vÆue
)  0;

546 i‡(*
vÆue
=='}')  value+1;

547 
ï
=
vÆue
; 0;

548 
	}
}

551 *
	$¥öt_obje˘
(
cJSON
 *
ôem
,
dïth
,
fmt
,
¥ötbuf„r
 *
p
)

553 **
íåõs
=0,**
«mes
=0;

554 *
out
=0,*
±r
,*
ªt
,*
°r
;
Àn
=7,
i
=0,
j
;

555 
cJSON
 *
chûd
=
ôem
->child;

556 
numíåõs
=0,
Áû
=0;

557 
size_t
 
tm∂í
=0;

559 
chûd
Ë
numíåõs
++,chûd=chûd->
√xt
;

561 i‡(!
numíåõs
)

563 i‡(
p
Ë
out
=
	`ísuª
’,
fmt
?
dïth
+4:3);

564 
out
=(*)
	`cJSON_mÆloc
(
fmt
?
dïth
+4:3);

565 i‡(!
out
)  0;

566 
±r
=
out
;*ptr++='{';

567 i‡(
fmt
Ë{*
±r
++='\n';
i
=0;i<
dïth
-1;i++) *ptr++='\t';}

568 *
±r
++='}';*ptr++=0;

569  
out
;

571 i‡(
p
)

574 
i
=
p
->
off£t
;

575 
Àn
=
fmt
?2:1; 
±r
=
	`ísuª
(
p
,len+1); if (!ptr)  0;

576 *
±r
++='{'; i‡(
fmt
Ë*±r++='\n'; *±r=0; 
p
->
off£t
+=
Àn
;

577 
chûd
=
ôem
->chûd;
dïth
++;

578 
chûd
)

580 i‡(
fmt
)

582 
±r
=
	`ísuª
(
p
,
dïth
); if (!ptr)  0;

583 
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

584 
p
->
off£t
+=
dïth
;

586 
	`¥öt_°rög_±r
(
chûd
->
°rög
,
p
);

587 
p
->
off£t
=
	`upd©e
(p);

589 
Àn
=
fmt
?2:1;

590 
±r
=
	`ísuª
(
p
,
Àn
); if (!ptr)  0;

591 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

592 
p
->
off£t
+=
Àn
;

594 
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,
p
);

595 
p
->
off£t
=
	`upd©e
(p);

597 
Àn
=(
fmt
?1:0)+(
chûd
->
√xt
?1:0);

598 
±r
=
	`ísuª
(
p
,
Àn
+1); if (!ptr)  0;

599 i‡(
chûd
->
√xt
Ë*
±r
++=',';

600 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

601 
p
->
off£t
+=
Àn
;

602 
chûd
=chûd->
√xt
;

604 
±r
=
	`ísuª
(
p
,
fmt
?(
dïth
+1):2); if (!ptr)  0;

605 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

606 *
±r
++='}';*ptr=0;

607 
out
=(
p
->
buf„r
)+
i
;

612 
íåõs
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

613 i‡(!
íåõs
)  0;

614 
«mes
=(**)
	`cJSON_mÆloc
(
numíåõs
*(*));

615 i‡(!
«mes
Ë{
	`cJSON_‰ì
(
íåõs
); 0;}

616 
	`mem£t
(
íåõs
,0,(*)*
numíåõs
);

617 
	`mem£t
(
«mes
,0,(*)*
numíåõs
);

620 
chûd
=
ôem
->chûd;
dïth
++;i‡(
fmt
Ë
Àn
+=depth;

621 
chûd
)

623 
«mes
[
i
]=
°r
=
	`¥öt_°rög_±r
(
chûd
->
°rög
,0);

624 
íåõs
[
i
++]=
ªt
=
	`¥öt_vÆue
(
chûd
,
dïth
,
fmt
,0);

625 i‡(
°r
 && 
ªt
Ë
Àn
+=
	`°æí
‘ë)+°æí(°r)+2+(
fmt
?2+
dïth
:0); 
Áû
=1;

626 
chûd
=chûd->
√xt
;

630 i‡(!
Áû
Ë
out
=(*)
	`cJSON_mÆloc
(
Àn
);

631 i‡(!
out
Ë
Áû
=1;

634 i‡(
Áû
)

636 
i
=0;i<
numíåõs
;i++Ë{i‡(
«mes
[i]Ë
	`cJSON_‰ì
“ames[i]);i‡(
íåõs
[i]) cJSON_free(entries[i]);}

637 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

642 *
out
='{';
±r
=out+1;i‡(
fmt
)*ptr++='\n';*ptr=0;

643 
i
=0;i<
numíåõs
;i++)

645 i‡(
fmt
Ë
j
=0;j<
dïth
;j++Ë*
±r
++='\t';

646 
tm∂í
=
	`°æí
(
«mes
[
i
]);
	`mem˝y
(
±r
,names[i],tmplen);ptr+=tmplen;

647 *
±r
++=':';i‡(
fmt
) *ptr++='\t';

648 
	`°r˝y
(
±r
,
íåõs
[
i
]);±r+=
	`°æí
(entries[i]);

649 i‡(
i
!=
numíåõs
-1Ë*
±r
++=',';

650 i‡(
fmt
Ë*
±r
++='\n';*ptr=0;

651 
	`cJSON_‰ì
(
«mes
[
i
]);cJSON_‰ì(
íåõs
[i]);

654 
	`cJSON_‰ì
(
«mes
);cJSON_‰ì(
íåõs
);

655 i‡(
fmt
Ë
i
=0;i<
dïth
-1;i++Ë*
±r
++='\t';

656 *
±r
++='}';*ptr++=0;

658  
out
;

659 
	}
}

662 
	$cJSON_GëAºaySize
(
cJSON
 *
¨øy
Ë{cJSON *
c
˜ºay->
chûd
;
i
=0;c)i++,c=c->
√xt
; i;
	}
}

663 
cJSON
 *
	$cJSON_GëAºayIãm
(
cJSON
 *
¨øy
,
ôem
Ë{cJSON *
c
˜ºay->
chûd
; ¯&& iãm>0Ëôem--,c=c->
√xt
;  c;
	}
}

664 
cJSON
 *
	$cJSON_GëObje˘Iãm
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{cJSON *
c
=obje˘->
chûd
; ¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëc=c->
√xt
;  c;
	}
}

667 
	$suffix_obje˘
(
cJSON
 *
¥ev
,cJSON *
ôem
Ë{¥ev->
√xt
=ôem;ôem->¥evıªv;
	}
}

669 
cJSON
 *
	$¸óã_ª„ªn˚
(
cJSON
 *
ôem
Ë{cJSON *
ªf
=
	`cJSON_New_Iãm
();i‡(!ªfË 0;
	`mem˝y
‘ef,ôem,(cJSON));ªf->
°rög
=0;ªf->
ty≥
|=
cJSON_IsRe„ªn˚
;ªf->
√xt
Ùef->
¥ev
=0;Ñef;
	}
}

672 
	$cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{cJSON *
c
˜ºay->
chûd
;i‡(!ôemË; i‡(!cË{¨øy->chûd=ôem;} {¯&& c->
√xt
Ëc=c->√xt; 
	`suffix_obje˘
(c,ôem);}
	}
}

673 
	$cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(ôem->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

674 
	$cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{i‡(!ôemË; i‡(!(ôem->
ty≥
&
cJSON_SåögIsC⁄°
Ë&& iãm->°rögË
	`cJSON_‰ì
(ôem->°rög);ôem->°rög=(*)°rög;ôem->ty≥|=cJSON_SåögIsC⁄°;
	`cJSON_AddIãmToAºay
(obje˘,ôem);
	}
}

675 
	$cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
Ë{
	`cJSON_AddIãmToAºay
◊ºay,
	`¸óã_ª„ªn˚
(ôem));
	}
}

676 
	$cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
Ë{
	`cJSON_AddIãmToObje˘
(obje˘,°rög,
	`¸óã_ª„ªn˚
(ôem));
	}
}

678 
cJSON
 *
	$cJSON_DëachIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c)  0;

679 i‡(
c
->
¥ev
Ëc->¥ev->
√xt
=c->√xt;i‡(c->√xtËc->√xt->¥ev=c->¥ev;i‡(c==
¨øy
->
chûd
Ë¨øy->chûd=c->√xt;c->¥ev=c->√xt=0; c;
	}
}

680 
	$cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromAºay
◊ºay,which));
	}
}

681 
cJSON
 *
	$cJSON_DëachIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög)Ëi++,c=c->
√xt
;i‡(cË 
	`cJSON_DëachIãmFromAºay
(obje˘,i); 0;
	}
}

682 
	$cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
Ë{
	`cJSON_Dñëe
(
	`cJSON_DëachIãmFromObje˘
(obje˘,°rög));
	}
}

685 
	$cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;i‡(!cË{
	`cJSON_AddIãmToAºay
(array,newitem);;}

686 
√wôem
->
√xt
=
c
;√wôem->
¥ev
=c->¥ev;c->¥evÚewôem;i‡(c==
¨øy
->
chûd
Ë¨øy->chûdÚewôem; √wôem->¥ev->√xtÚewôem;
	}
}

687 
	$cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
Ë{cJSON *
c
˜ºay->
chûd
;¯&& which>0Ëc=c->
√xt
,which--;if (!c) ;

688 
√wôem
->
√xt
=
c
->√xt;√wôem->
¥ev
=c->prev;if (newitem->next)Çewitem->next->prev=newitem;

689 i‡(
c
==
¨øy
->
chûd
Ë¨øy->chûd=
√wôem
; √wôem->
¥ev
->
√xt
Úewôem;c->√xt=c->¥ev=0;
	`cJSON_Dñëe
(c);
	}
}

690 
	$cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
){
i
=0;cJSON *
c
=obje˘->
chûd
;¯&& 
	`cJSON_°rˇ£cmp
(c->°rög,°rög))i++,c=c->
√xt
;if(c){√wôem->°rög=
	`cJSON_°rdup
(°rög);
	`cJSON_Rïœ˚IãmInAºay
(obje˘,i,√wôem);}
	}
}

693 
cJSON
 *
	$cJSON_Cª©eNuŒ
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_NULL
; iãm;
	}
}

694 
cJSON
 *
	$cJSON_Cª©eTrue
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_True
; iãm;
	}
}

695 
cJSON
 *
	$cJSON_Cª©eFÆ£
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_FÆ£
; iãm;
	}
}

696 
cJSON
 *
	$cJSON_Cª©eBoﬁ
(
b
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=b?
cJSON_True
:
cJSON_FÆ£
; iãm;
	}
}

697 
cJSON
 *
	$cJSON_Cª©eNumbî
(
num
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Numbî
;ôem->
vÆuedoubÀ
Úum;ôem->
vÆueöt
=(Íum;} iãm;
	}
}

698 
cJSON
 *
	$cJSON_Cª©eSåög
(c⁄° *
°rög
Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem){ôem->
ty≥
=
cJSON_Såög
;ôem->
vÆue°rög
=
	`cJSON_°rdup
(°rög);} iãm;
	}
}

699 
cJSON
 *
	$cJSON_Cª©eAºay
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Aºay
; iãm;
	}
}

700 
cJSON
 *
	$cJSON_Cª©eObje˘
(Ë{
cJSON
 *
ôem
=
	`cJSON_New_Iãm
();if(ôem)ôem->
ty≥
=
cJSON_Obje˘
; iãm;
	}
}

703 
cJSON
 *
	$cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

704 
cJSON
 *
	$cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

705 
cJSON
 *
	$cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eNumbî
“umbîs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

706 
cJSON
 *
	$cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
Ë{
i
;
cJSON
 *
n
=0,*
p
=0,*
a
=
	`cJSON_Cª©eAºay
();i=0;®&& i<cou¡;i++){n=
	`cJSON_Cª©eSåög
(°rögs[i]);if(!iÔ->
chûd
Ú;
	`suffix_obje˘
’,n);pÚ;}á;
	}
}

709 
cJSON
 *
	$cJSON_Du∂iˇã
(
cJSON
 *
ôem
,
ªcur£
)

711 
cJSON
 *
√wôem
,*
˝å
,*
≈å
=0,*
√wchûd
;

713 i‡(!
ôem
)  0;

715 
√wôem
=
	`cJSON_New_Iãm
();

716 i‡(!
√wôem
)  0;

718 
√wôem
->
ty≥
=
ôem
->ty≥&(~
cJSON_IsRe„ªn˚
),√wôem->
vÆueöt
=ôem->vÆueöt,√wôem->
vÆuedoubÀ
=item->valuedouble;

719 i‡(
ôem
->
vÆue°rög
Ë{
√wôem
->vÆue°rög=
	`cJSON_°rdup
(ôem->vÆue°rög); i‡(!√wôem->vÆue°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

720 i‡(
ôem
->
°rög
Ë{
√wôem
->°rög=
	`cJSON_°rdup
(ôem->°rög); i‡(!√wôem->°rögË{
	`cJSON_Dñëe
(newitem); 0;}}

722 i‡(!
ªcur£
Ë 
√wôem
;

724 
˝å
=
ôem
->
chûd
;

725 
˝å
)

727 
√wchûd
=
	`cJSON_Du∂iˇã
(
˝å
,1);

728 i‡(!
√wchûd
Ë{
	`cJSON_Dñëe
(
√wôem
); 0;}

729 i‡(
≈å
Ë{≈å->
√xt
=
√wchûd
,√wchûd->
¥ev
=nptr;nptr=newchild;}

730 {
√wôem
->
chûd
=
√wchûd
;
≈å
=newchild;}

731 
˝å
=˝å->
√xt
;

733  
√wôem
;

734 
	}
}

736 
	$cJSON_Möify
(*
js⁄
)

738 *
öto
=
js⁄
;

739 *
js⁄
)

741 i‡(*
js⁄
==' ') json++;

742 i‡(*
js⁄
=='\t') json++;

743 i‡(*
js⁄
=='\r') json++;

744 i‡(*
js⁄
=='\n') json++;

745 i‡(*
js⁄
=='/' && json[1]=='/') *json && *json!='\n') json++;

746 i‡(*
js⁄
=='/' && json[1]=='*') {*json && !(*json=='*' && json[1]=='/')) json++;json+=2;}

747 i‡(*
js⁄
=='\"'){*
öto
++=*json++;*json && *json!='\"'){if (*json=='\\') *into++=*json++;*into++=*json++;}*into++=*json++;}

748 *
öto
++=*
js⁄
++;

750 *
öto
=0;

751 
	}
}

	@cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


30 
	~<°ddef.h
>

32 
	#cJSON_FÆ£
 0

	)

33 
	#cJSON_True
 1

	)

34 
	#cJSON_NULL
 2

	)

35 
	#cJSON_Numbî
 3

	)

36 
	#cJSON_Såög
 4

	)

37 
	#cJSON_Aºay
 5

	)

38 
	#cJSON_Obje˘
 6

	)

39 
	#cJSON_IsRe„ªn˚
 256

	)

40 
	#cJSON_SåögIsC⁄°
 512

	)

43 
	scJSON
 {

44 
cJSON
 *
√xt
,*
¥ev
;

45 
cJSON
 *
chûd
;

47 
ty≥
;

49 *
vÆue°rög
;

50 
vÆueöt
;

51 
vÆuedoubÀ
;

53 *
°rög
;

54 } 
	tcJSON
;

56 
	scJSON_Hooks
 {

57 *(*
mÆloc_‚
)(
size_t
 
sz
);

58 (*
‰ì_‚
)(*
±r
);

59 } 
	tcJSON_Hooks
;

62 
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

66 
cJSON
 *
cJSON_P¨£
(c⁄° *
vÆue
);

68 *
cJSON_Pröt
(
cJSON
 *
ôem
);

70 *
cJSON_PrötUnf‹m©ãd
(
cJSON
 *
ôem
);

72 *
cJSON_PrötBuf„ªd
(
cJSON
 *
ôem
,
¥ebuf„r
,
fmt
);

74 
cJSON_Dñëe
(
cJSON
 *
c
);

77 
cJSON_GëAºaySize
(
cJSON
 *
¨øy
);

79 
cJSON
 *
cJSON_GëAºayIãm
(cJSON *
¨øy
,
ôem
);

81 
cJSON
 *
cJSON_GëObje˘Iãm
(cJSON *
obje˘
,c⁄° *
°rög
);

84 c⁄° *
cJSON_GëEº‹På
();

87 
cJSON
 *
cJSON_Cª©eNuŒ
();

88 
cJSON
 *
cJSON_Cª©eTrue
();

89 
cJSON
 *
cJSON_Cª©eFÆ£
();

90 
cJSON
 *
cJSON_Cª©eBoﬁ
(
b
);

91 
cJSON
 *
cJSON_Cª©eNumbî
(
num
);

92 
cJSON
 *
cJSON_Cª©eSåög
(c⁄° *
°rög
);

93 
cJSON
 *
cJSON_Cª©eAºay
();

94 
cJSON
 *
cJSON_Cª©eObje˘
();

97 
cJSON
 *
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
,
cou¡
);

98 
cJSON
 *
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
,
cou¡
);

99 
cJSON
 *
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
,
cou¡
);

100 
cJSON
 *
cJSON_Cª©eSåögAºay
(c⁄° **
°rögs
,
cou¡
);

103 
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

104 
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

105 
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

107 
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

108 
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
ôem
);

111 
cJSON
 *
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
,
which
);

112 
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
,
which
);

113 
cJSON
 *
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
,c⁄° *
°rög
);

114 
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
);

117 
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

118 
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
,
which
,cJSON *
√wôem
);

119 
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

122 
cJSON
 *
cJSON_Du∂iˇã
(cJSON *
ôem
,
ªcur£
);

128 
cJSON
 *
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
,c⁄° **
ªtu∫_∑r£_íd
,
ªquúe_nuŒ_ãrmö©ed
);

130 
cJSON_Möify
(*
js⁄
);

133 
	#cJSON_AddNuŒToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNuŒ
())

	)

134 
	#cJSON_AddTrueToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eTrue
())

	)

135 
	#cJSON_AddFÆ£ToObje˘
(
obje˘
,
«me
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eFÆ£
())

	)

136 
	#cJSON_AddBoﬁToObje˘
(
obje˘
,
«me
,
b
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eBoﬁ
(b))

	)

137 
	#cJSON_AddNumbîToObje˘
(
obje˘
,
«me
,
n
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eNumbî
“))

	)

138 
	#cJSON_AddSåögToObje˘
(
obje˘
,
«me
,
s
Ë
	`cJSON_AddIãmToObje˘
(obje˘,Çame, 
	`cJSON_Cª©eSåög
(s))

	)

141 
	#cJSON_SëI¡VÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

142 
	#cJSON_SëNumbîVÆue
(
obje˘
,
vÆ
Ë((obje˘)?(obje˘)->
vÆueöt
=(obje˘)->
vÆuedoubÀ
=(vÆ):(vÆ))

	)

144 #ifde‡
__˝lu•lus


	@echo.c

13 #i‚de‡
löt


14 c⁄° 
	grcsid
[] = "$Id:Écho.c,v 1.5 1999/07/28 00:29:37Ñoberts Exp $";

16 
	~"fcgi_c⁄fig.h
"

17 
	~"cJSON.h
"

18 
	~<°dlib.h
>

19 
	~<°dio.h
>

20 
	~<°rög.h
>

21 #ifde‡
HAVE_UNISTD_H


22 
	~<uni°d.h
>

23 
	~"make_log.h
"

24 
	~"fcgi_°dio.h
"

25 
	~"utû_cgi.h
"

26 
	~<°ddef.h
>

27 
	~<°d¨g.h
>

28 
	~<as£π.h
>

29 
	~<húedis/húedis.h
>

31 
	~<sys/ty≥s.h
>

32 
	~<sys/°©.h
>

33 
	~<f˙é.h
>

34 #ifde‡
_WIN32


35 
	~<¥o˚ss.h
>

37 
	#REDIS_LOG_MODULE
 "d©aba£"

	)

38 
	#REDIS_LOG_PROC
 "ªdis"

	)

40 
	#REDIS_COMMAND_SIZE
 300

	)

41 
	#FIELD_ID_SIZE
 100

	)

42 
	#VALUES_ID_SIZE
 1024

	)

43 **
ívú⁄
;

45 
	$r›_ã°_ª∂y_ty≥
(
ªdisRïly
 *
ª∂y
)

47 
ª∂y
->
ty≥
) {

48 
REDIS_REPLY_STATUS
:

49 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_STATUS=[string] useÑeply->strÅo get data,Ñeply->len get dataÜen\n");

51 
REDIS_REPLY_ERROR
:

52 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_ERROR=[string] useÑeply->strÅo get data,Ñeply->len get dateÜen\n");

54 
REDIS_REPLY_INTEGER
:

55 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_INTEGER=[longÜong] useÑeply->integerÅo get data\n");

57 
REDIS_REPLY_NIL
:

58 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_NIL=[] dataÇotÉxist\n");

60 
REDIS_REPLY_ARRAY
:

61 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_ARRAY=[array] useÑeply->elementsÅo getÇumber of data,Ñeply->element[index]Åo get (structÑedisReply*) Object\n");

63 
REDIS_REPLY_STRING
:

64 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_string=[string] useÑeply->strÅo get data,Ñeply->len get dataÜen\n");

67 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Can'tÖarseÅhisÅype\n");

70 
	}
}

71 
	$maö
 ()

73 
	`FCGI_Ac˚±
() >= 0) {

75 
	`¥ötf
("Content-type:ápplication/json\r\n\r\n");

77 
ªdisC⁄ãxt
 *
c⁄n
 = 
	`ªdisC⁄√˘
("127.0.0.1", 6379);

79 
ªdisRïly
* 
r
 = 
	`ªdisComm™d
(
c⁄n
, "hkeys FILE_URL");

81 
ªdisRïly
* 
r1
 = 
	`ªdisComm™d
(
c⁄n
, "hlen FILE_URL");

82 
Àn
 = 
r1
->
öãgî
;

83 
	`‰ìRïlyObje˘
(
r1
);

84 
	`LOG
("d©Æog", "d©Æog", "À¿%d\n", 
Àn
);

85 
i
 = 0;

89 
cJSON
 *
roŸ
 = 
	`cJSON_Cª©eObje˘
();

90 
cJSON
* 
thm
, *
Êd
;

91 
	`cJSON_AddIãmToObje˘
(
roŸ
, "games", 
thm
=
	`cJSON_Cª©eAºay
());

92 
i
 = 0; i < 
Àn
; i++)

94 *
«me1
 = (
r
->
ñemít
)[
i
]->
°r
;

95 
«me
[64] = { 0 };

96 
	`°r˝y
(
«me
, 
«me1
);

97 
	`LOG
("d©Æog", "«me", "«me[%d] = %s\n", 
i
, 
«me
);

98 
r1
 = 
	`ªdisComm™d
(
c⁄n
, "hgë FILE_URL %s", 
«me
);

99 * 
uæ1
 = 
r1
->
°r
;

100 
uæ
[64] = { 0 };

101 
	`°r˝y
(
uæ
, 
uæ1
);

102 
	`LOG
("d©Æog", "uæ", "uæ[%d] = %s\n", 
i
, 
uæ
);

103 
	`cJSON_AddIãmToAºay
(
thm
,
Êd
=
	`cJSON_Cª©eObje˘
());

105 
	`cJSON_AddSåögToObje˘
(
Êd
, "id", 
«me
);

106 
	`cJSON_AddNumbîToObje˘
(
Êd
, "kind", 2);

107 
	`cJSON_AddSåögToObje˘
(
Êd
, "tôÀ_m", 
«me
);

108 
	`cJSON_AddSåögToObje˘
(
Êd
, "title_s", "Êñá‰ª∂title_s");

109 
	`cJSON_AddSåögToObje˘
(
Êd
, "descrip", "2015-04-04");

110 
	`cJSON_AddSåögToObje˘
(
Êd
, "picurl_m", "static/file_png/avi.png");

112 
	`cJSON_AddSåögToObje˘
(
Êd
, "uæ", 
uæ
);

113 
	`cJSON_AddNumbîToObje˘
(
Êd
, "pv", 0);

114 
	`cJSON_AddNumbîToObje˘
(
Êd
, "hot", 1);

115 
	`‰ìRïlyObje˘
(
r1
);

117 * 
°r
 = 
	`cJSON_Pröt
(
roŸ
);

118 
	`¥ötf
("%s\n", 
°r
);

120 
	`‰ì
(
°r
);

121 
	`ªdisFªe
(
c⁄n
);

122 
	`‰ìRïlyObje˘
(
r
);

123 
	`cJSON_Dñëe
(
roŸ
);

126 
	}
}

	@fastDFS_test/make_log.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~<°rög.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<time.h
>

7 
	~<sys/°©.h
>

9 
	~"make_log.h
"

10 
	~<±hªad.h
>

51 
±hªad_muãx_t
 
	gˇ_log_lock
=
PTHREAD_MUTEX_INITIALIZER
;

54 
	$dumpmsg_to_fûe
(*
moduÀ_«me
, *
¥oc_«me
, c⁄° *
fûíame
,

55 
löe
, c⁄° *
fun˙ame
, *
fmt
, ...)

57 
mesg
[4096]={0};

58 
buf
[4096]={0};

59 
fûï©h
[1024] = {0};

60 
time_t
 
t
=0;

61 
tm
 * 
now
=
NULL
;

62 
va_li°
 
≠
;

65 
	`time
(&
t
);

66 
now
 = 
	`loˇ…ime
(&
t
);

67 
	`va_°¨t
(
≠
, 
fmt
);

68 
	`v•rötf
(
mesg
, 
fmt
, 
≠
);

69 
	`va_íd
(
≠
);

71 
	`¢¥ötf
(
buf
, 4096, "%04d-%02d-%02d %02d:%02d:%02d||%s||%s||%s||%d||%s||\n%s\n",

72 
now
 -> 
tm_yór
 + 1900,Çow -> 
tm_m⁄
 + 1,

73 
now
 -> 
tm_mday
,Çow -> 
tm_hour
,Çow -> 
tm_mö
,Çow -> 
tm_£c
,

74 
moduÀ_«me
, 
¥oc_«me
, 
fûíame
,

75 
löe
, 
fun˙ame
, 
mesg
);

77 
	`¢¥ötf
(
buf
, 4096, "===%04d%02d%02d-%02d%02d%02d,%s[%d]=== %s\n",

78 
now
 -> 
tm_yór
 + 1900,Çow -> 
tm_m⁄
 + 1,

79 
now
 -> 
tm_mday
,Çow -> 
tm_hour
,Çow -> 
tm_mö
,Çow -> 
tm_£c
,

80 
fun˙ame
, 
löe
, 
mesg
);

81 
	`make_∑th
(
fûï©h
, 
moduÀ_«me
, 
¥oc_«me
);

83 
	`±hªad_muãx_lock
(&
ˇ_log_lock
);

84 
	`out_put_fûe
(
fûï©h
, 
buf
);

85 
	`±hªad_muãx_u∆ock
(&
ˇ_log_lock
);

88 
	}
}

91 
	$out_put_fûe
(*
∑th
, *
buf
)

93 
fd
;

94 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
 | 
O_CREAT
 | 
O_APPEND
, 0777);

96 if(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)) != ()strlen(buf)) {

97 
	`Ârötf
(
°dîr
, "writeÉrror!\n");

98 
	`˛o£
(
fd
);

101 
	`˛o£
(
fd
);

105 
	}
}

107 
	$make_∑th
(*
∑th
, *
moduÀ_«me
, *
¥oc_«me
)

109 
time_t
 
t
;

110 
tm
 *
now
 = 
NULL
;

111 
t›_dú
[1024] = {"."};

112 
£c⁄d_dú
[1024] = {"./logs"};

113 
thúd_dú
[1024] = {0};

114 
y_dú
[1024] = {0};

115 
m_dú
[1024] = {0};

116 
d_dú
[1024] = {0};

117 
	`time
(&
t
);

118 
now
 = 
	`loˇ…ime
(&
t
);

119 
	`¢¥ötf
(
∑th
, 1024, "./logs/%s/%04d/%02d/%s-%02d.log", 
moduÀ_«me
, 
now
 -> 
tm_yór
 + 1900,Çow -> 
tm_m⁄
 + 1, 
¥oc_«me
,Çow -> 
tm_mday
);

121 
	`•rötf
(
thúd_dú
, "%s/%s", 
£c⁄d_dú
, 
moduÀ_«me
);

122 
	`•rötf
(
y_dú
, "%s/%04d/", 
thúd_dú
, 
now
 -> 
tm_yór
 + 1900);

123 
	`•rötf
(
m_dú
, "%s/%02d/", 
y_dú
, 
now
 -> 
tm_m⁄
 + 1);

124 
	`•rötf
(
d_dú
,"%s/%02d/", 
m_dú
, 
now
 -> 
tm_mday
);

126 if(
	`ac˚ss
(
t›_dú
, 0) == -1) {

127 if(
	`mkdú
(
t›_dú
, 0777) == -1) {

128 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
t›_dú
);

129 } if(
	`mkdú
(
£c⁄d_dú
, 0777) == -1) {

130 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
£c⁄d_dú
);

131 } if(
	`mkdú
(
thúd_dú
, 0777) == -1) {

132 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
thúd_dú
);

133 } if(
	`mkdú
(
y_dú
, 0777) == -1) {

134 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
y_dú
);

135 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

136 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
m_dú
);

138 } if(
	`ac˚ss
(
£c⁄d_dú
, 0) == -1) {

139 if(
	`mkdú
(
£c⁄d_dú
, 0777) == -1) {

140 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
£c⁄d_dú
);

141 } if(
	`mkdú
(
thúd_dú
, 0777) == -1) {

142 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
£c⁄d_dú
, 
thúd_dú
);

143 } if(
	`mkdú
(
y_dú
, 0777) == -1) {

144 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
£c⁄d_dú
, 
y_dú
);

145 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

146 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
£c⁄d_dú
, 
m_dú
);

148 } if(
	`ac˚ss
(
thúd_dú
, 0) == -1) {

149 if(
	`mkdú
(
thúd_dú
, 0777) == -1) {

150 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
thúd_dú
);

151 } if(
	`mkdú
(
y_dú
, 0777) == -1) {

152 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
thúd_dú
, 
y_dú
);

153 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

154 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
thúd_dú
, 
m_dú
);

156 } i‡(
	`ac˚ss
(
y_dú
, 0) == -1) {

157 if(
	`mkdú
(
y_dú
, 0777) == -1) {

158 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
y_dú
);

159 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

160 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
y_dú
, 
m_dú
);

163 } i‡(
	`ac˚ss
(
m_dú
, 0) == -1) {

164 if(
	`mkdú
(
m_dú
, 0777)) {

165 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
m_dú
);

170 
	}
}

173 
	$maö
()

175 
∑th
[1024] = {0};

176 
¥oc_«me
[] = {"sys_guard"};

177 
buf
[] = {"12345\n"};

178 
	`make_∑th
(
∑th
, 
¥oc_«me
);

179 
	`out_put_fûe
(
∑th
, 
buf
);

181 
	}
}

	@fastDFS_test/make_log.h

1 #i‚de‡ 
_MAKE_LOG_H_


2 
	#_MAKE_LOG_H


	)

3 
	~"±hªad.h
"

5 
out_put_fûe
(*
∑th
, *
buf
);

6 
make_∑th
(*
∑th
, *
moduÀ_«me
, *
¥oc_«me
);

7 
dumpmsg_to_fûe
(*
moduÀ_«me
, *
¥oc_«me
, c⁄° *
fûíame
,

8 
löe
, c⁄° *
fun˙ame
, *
fmt
, ...);

9 #i‚de‡
_LOG


10 
	#LOG
(
moduÀ_«me
, 
¥oc_«me
, 
x
...Ë\

	)

12 
dumpmsg_to_fûe
(
moduÀ_«me
, 
¥oc_«me
, 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, ##
x
);\

15 
	#LOG
(
moduÀ_«me
, 
¥oc_«me
, 
x
...)

	)

18 
±hªad_muãx_t
 
ˇ_log_lock
;

	@fastDFS_test/test_client.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

5 
	~<±hªad.h
>

6 
	~<sys/waô.h
>

8 
	~"make_log.h
"

10 
	#LOG_MODULE
 "ã°"

	)

11 
	#LOG_PROC
 "Á°DFS"

	)

14 
	#FILE_ID_LEN
 (256)

	)

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
fûe_id
[
FILE_ID_LEN
] = {0};

21 i‡(
¨gc
 < 2) {

22 
	`¥ötf
("./a.out [filename]\n");

23 
	`exô
(1);

26 *
fûe_«me
 = 
¨gv
[1];

29 
pid_t
 
pid
;

30 
pfd
[2];

32 i‡(
	`pùe
(
pfd
) < 0) {

33 
	`¥ötf
("pipÉrror\n");

36 
pid
 = 
	`f‹k
();

37 i‡(
pid
 < 0) {

38 
	`¥ötf
("forkÉrror\n");

41 i‡(
pid
 == 0) {

44 
	`˛o£
(
pfd
[0]);

47 
	`dup2
(
pfd
[1], 
STDOUT_FILENO
);

49 
	`exe˛p
("fdfs_u∂ﬂd_fûe", "fdfs_u∂ﬂd_fûe", "/ëc/fdfs/˛õ¡.c⁄f", 
fûe_«me
, 
NULL
);

51 
	`¥ötf
("execlp fdfs_upload_fileÉrror\n");

52 
	`˛o£
(
pfd
[1]);

56 
	`˛o£
(
pfd
[1]);

58 
	`waô
(
NULL
);

61 
	`ªad
(
pfd
[0], 
fûe_id
, 
FILE_ID_LEN
);

64 
	`LOG
(
LOG_MODULE
, 
LOG_PROC
, "gë fûe_id[%s]", 
fûe_id
);

69 
	}
}

	@make_log.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~<°rög.h
>

4 
	~<f˙é.h
>

5 
	~<uni°d.h
>

6 
	~<time.h
>

7 
	~<sys/°©.h
>

9 
	~"make_log.h
"

10 
	~<±hªad.h
>

51 
±hªad_muãx_t
 
	gˇ_log_lock
=
PTHREAD_MUTEX_INITIALIZER
;

54 
	$dumpmsg_to_fûe
(*
moduÀ_«me
, *
¥oc_«me
, c⁄° *
fûíame
,

55 
löe
, c⁄° *
fun˙ame
, *
fmt
, ...)

57 
mesg
[4096]={0};

58 
buf
[4096]={0};

59 
fûï©h
[1024] = {0};

60 
time_t
 
t
=0;

61 
tm
 * 
now
=
NULL
;

62 
va_li°
 
≠
;

65 
	`time
(&
t
);

66 
now
 = 
	`loˇ…ime
(&
t
);

67 
	`va_°¨t
(
≠
, 
fmt
);

68 
	`v•rötf
(
mesg
, 
fmt
, 
≠
);

69 
	`va_íd
(
≠
);

71 
	`¢¥ötf
(
buf
, 4096, "%04d-%02d-%02d %02d:%02d:%02d||%s||%s||%s||%d||%s||\n%s\n",

72 
now
 -> 
tm_yór
 + 1900,Çow -> 
tm_m⁄
 + 1,

73 
now
 -> 
tm_mday
,Çow -> 
tm_hour
,Çow -> 
tm_mö
,Çow -> 
tm_£c
,

74 
moduÀ_«me
, 
¥oc_«me
, 
fûíame
,

75 
löe
, 
fun˙ame
, 
mesg
);

77 
	`¢¥ötf
(
buf
, 4096, "===%04d%02d%02d-%02d%02d%02d,%s[%d]=== %s\n",

78 
now
 -> 
tm_yór
 + 1900,Çow -> 
tm_m⁄
 + 1,

79 
now
 -> 
tm_mday
,Çow -> 
tm_hour
,Çow -> 
tm_mö
,Çow -> 
tm_£c
,

80 
fun˙ame
, 
löe
, 
mesg
);

81 
	`make_∑th
(
fûï©h
, 
moduÀ_«me
, 
¥oc_«me
);

83 
	`±hªad_muãx_lock
(&
ˇ_log_lock
);

84 
	`out_put_fûe
(
fûï©h
, 
buf
);

85 
	`±hªad_muãx_u∆ock
(&
ˇ_log_lock
);

88 
	}
}

91 
	$out_put_fûe
(*
∑th
, *
buf
)

93 
fd
;

94 
fd
 = 
	`›í
(
∑th
, 
O_RDWR
 | 
O_CREAT
 | 
O_APPEND
, 0777);

96 if(
	`wrôe
(
fd
, 
buf
, 
	`°æí
(buf)) != ()strlen(buf)) {

97 
	`Ârötf
(
°dîr
, "writeÉrror!\n");

98 
	`˛o£
(
fd
);

101 
	`˛o£
(
fd
);

105 
	}
}

107 
	$make_∑th
(*
∑th
, *
moduÀ_«me
, *
¥oc_«me
)

109 
time_t
 
t
;

110 
tm
 *
now
 = 
NULL
;

111 
t›_dú
[1024] = {"."};

112 
£c⁄d_dú
[1024] = {"./logs"};

113 
thúd_dú
[1024] = {0};

114 
y_dú
[1024] = {0};

115 
m_dú
[1024] = {0};

116 
d_dú
[1024] = {0};

117 
	`time
(&
t
);

118 
now
 = 
	`loˇ…ime
(&
t
);

119 
	`¢¥ötf
(
∑th
, 1024, "./logs/%s/%04d/%02d/%s-%02d.log", 
moduÀ_«me
, 
now
 -> 
tm_yór
 + 1900,Çow -> 
tm_m⁄
 + 1, 
¥oc_«me
,Çow -> 
tm_mday
);

121 
	`•rötf
(
thúd_dú
, "%s/%s", 
£c⁄d_dú
, 
moduÀ_«me
);

122 
	`•rötf
(
y_dú
, "%s/%04d/", 
thúd_dú
, 
now
 -> 
tm_yór
 + 1900);

123 
	`•rötf
(
m_dú
, "%s/%02d/", 
y_dú
, 
now
 -> 
tm_m⁄
 + 1);

124 
	`•rötf
(
d_dú
,"%s/%02d/", 
m_dú
, 
now
 -> 
tm_mday
);

126 if(
	`ac˚ss
(
t›_dú
, 0) == -1) {

127 if(
	`mkdú
(
t›_dú
, 0777) == -1) {

128 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
t›_dú
);

129 } if(
	`mkdú
(
£c⁄d_dú
, 0777) == -1) {

130 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
£c⁄d_dú
);

131 } if(
	`mkdú
(
thúd_dú
, 0777) == -1) {

132 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
thúd_dú
);

133 } if(
	`mkdú
(
y_dú
, 0777) == -1) {

134 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
y_dú
);

135 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

136 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
t›_dú
, 
m_dú
);

138 } if(
	`ac˚ss
(
£c⁄d_dú
, 0) == -1) {

139 if(
	`mkdú
(
£c⁄d_dú
, 0777) == -1) {

140 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
£c⁄d_dú
);

141 } if(
	`mkdú
(
thúd_dú
, 0777) == -1) {

142 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
£c⁄d_dú
, 
thúd_dú
);

143 } if(
	`mkdú
(
y_dú
, 0777) == -1) {

144 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
£c⁄d_dú
, 
y_dú
);

145 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

146 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
£c⁄d_dú
, 
m_dú
);

148 } if(
	`ac˚ss
(
thúd_dú
, 0) == -1) {

149 if(
	`mkdú
(
thúd_dú
, 0777) == -1) {

150 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
thúd_dú
);

151 } if(
	`mkdú
(
y_dú
, 0777) == -1) {

152 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
thúd_dú
, 
y_dú
);

153 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

154 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
thúd_dú
, 
m_dú
);

156 } i‡(
	`ac˚ss
(
y_dú
, 0) == -1) {

157 if(
	`mkdú
(
y_dú
, 0777) == -1) {

158 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
y_dú
);

159 } if(
	`mkdú
(
m_dú
, 0777) == -1) {

160 
	`Ârötf
(
°dîr
, "%s:¸óã %†Áûed!\n", 
y_dú
, 
m_dú
);

163 } i‡(
	`ac˚ss
(
m_dú
, 0) == -1) {

164 if(
	`mkdú
(
m_dú
, 0777)) {

165 
	`Ârötf
(
°dîr
, "¸óã %†Áûed!\n", 
m_dú
);

170 
	}
}

173 
	$maö
()

175 
∑th
[1024] = {0};

176 
¥oc_«me
[] = {"sys_guard"};

177 
buf
[] = {"12345\n"};

178 
	`make_∑th
(
∑th
, 
¥oc_«me
);

179 
	`out_put_fûe
(
∑th
, 
buf
);

181 
	}
}

	@make_log.h

1 #i‚de‡ 
_MAKE_LOG_H_


2 
	#_MAKE_LOG_H


	)

3 
	~"±hªad.h
"

5 
out_put_fûe
(*
∑th
, *
buf
);

6 
make_∑th
(*
∑th
, *
moduÀ_«me
, *
¥oc_«me
);

7 
dumpmsg_to_fûe
(*
moduÀ_«me
, *
¥oc_«me
, c⁄° *
fûíame
,

8 
löe
, c⁄° *
fun˙ame
, *
fmt
, ...);

9 #i‚de‡
_LOG


10 
	#LOG
(
moduÀ_«me
, 
¥oc_«me
, 
x
...) \

12 
	`dumpmsg_to_fûe
(
moduÀ_«me
, 
¥oc_«me
, 
__FILE__
, 
__LINE__
, 
__FUNCTION__
, ##
x
);\

13 }0)

	)

15 
	#LOG
(
moduÀ_«me
, 
¥oc_«me
, 
x
...)

	)

18 
±hªad_muãx_t
 
ˇ_log_lock
;

	@redis_keys.h

6 #i‚de‡
_REDIS_KEYS_H_


7 
	#_REDIS_KEYS_H_


	)

10 
	#KEY_NAME_SIZ
 (50)

	)

11 
	#REDIS_DILIMT
 "|"

	)

12 
	#REDIS_DILIMT_SIZ
 (3)

	)

26 
	#FILE_INFO_LIST
 "FILE_INFO_LIST"

	)

37 
	#FILE_HOT_ZSET
 "FILE_HOT_ZSET"

	)

43 
	#FILE_TYPE_BMP
 "1"

	)

44 
	#FILE_TYPE_ZIP
 "2"

	)

45 
	#FILE_TYPE_VEDIO
 "3"

	)

46 
	#FILE_TYPE_MEDIA
 "4"

	)

47 
	#EVENT_TYPE_TXT
 "5"

	)

48 
	#EVENT_TYPE_OTHER
 "6"

	)

	@redis_op.c

6 
	~"ªdis_›.h
"

21 
	$r›_£À˘d©aba£
(
ªdisC⁄ãxt
 *
c⁄n
, 
db_no
)

23 
ªä
 = 0;

24 
ªdisRïly
 *
ª∂y
 = 
NULL
;

27 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "£À˘ %d", 
db_no
);

28 i‡(
ª∂y
 =
NULL
) {

29 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]Sñe˘ d©aba£ %dÉº‹!\n", 
db_no
);

30 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Sñe˘ d©aba£ %dÉº‹!%s\n", 
db_no
, 
c⁄n
->
îr°r
);

31 
ªä
 = -1;

32 
END
;

35 
	`¥ötf
("[+][GMS_REDIS]Sñe˘ d©aba£ %d SUCCESS!\n", 
db_no
);

36 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]Sñe˘ d©aba£ %d SUCCESS!\n", 
db_no
);

38 
END
:

39 
	`‰ìRïlyObje˘
(
ª∂y
);

40  
ªä
;

41 
	}
}

55 
	$r›_Êush_d©aba£
(
ªdisC⁄ãxt
 *
c⁄n
)

57 
ªä
 = 0;

58 
ªdisRïly
 *
ª∂y
 = 
NULL
;

60 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "FLUSHDB");

61 i‡(
ª∂y
 =
NULL
) {

62 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]Clearáll dataÉrror\n");

63 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Clearáll dataÉrror\n");

64 
ªä
 = -1;

65 
END
;

68 
	`¥ötf
("[+][GMS_REDIS]Clearáll data!!\n");

69 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
,"[+][GMS_REDIS]Clearáll data!!\n");

71 
END
:

72 
	`‰ìRïlyObje˘
(
ª∂y
);

73  
ªä
;

74 
	}
}

89 
	$r›_is_key_exi°
(
ªdisC⁄ãxt
 *
c⁄n
, * 
key
)

91 
ªä
 = 0;

93 
ªdisRïly
 *
ª∂y
 = 
NULL
;

95 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "EXISTS %s", 
key
);

97 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

98 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]is keyÉxist get wrongÅype!\n");

99 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]i†keyÉxi° gë wr⁄gÅy≥! %s\n", 
c⁄n
->
îr°r
);

100 
ªä
 = -1;

101 
END
;

104 i‡(
ª∂y
->
öãgî
 == 1) {

105 
ªä
 = 1;

108 
ªä
 = 0;

111 
END
:

112 
	`‰ìRïlyObje˘
(
ª∂y
);

113  
ªä
;

114 
	}
}

128 
	$r›_dñ_key
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
)

130 
ªä
 = 0;

131 
ªdisRïly
 *
ª∂y
 = 
NULL
;

133 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "DEL %s", 
key
);

134 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

135 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS] DEL key %†ERROR\n", 
key
);

136 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS] DEL key %†ERROR %s\n", 
key
, 
c⁄n
->
îr°r
);

137 
ªä
 = -1;

138 
END
;

141 i‡(
ª∂y
->
öãgî
 > 0) {

142 
ªä
 = 0;

145 
ªä
 = -1;

148 
END
:

149 
	`‰ìRïlyObje˘
(
ª∂y
);

150  
ªä
;

151 
	}
}

166 
	$r›_£t_key_li„cy˛e
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
time_t
 
dñëe_time
)

168 
ªä
 = 0;

169 
ªdisRïly
 *
ª∂y
 = 
NULL
;

171 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "EXPIREAT %†%d", 
key
, 
dñëe_time
);

172 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

173 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]Së key:%†dñëêtimêERROR!\n", 
key
);

174 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Së key:%†dñëêtimêERROR! %s\n", 
key
, 
c⁄n
->
îr°r
);

175 
ªä
 = -1;

177 i‡(
ª∂y
->
öãgî
 == 1) {

179 
ªä
 = 0;

183 
ªä
 = -1;

187 
	`‰ìRïlyObje˘
(
ª∂y
);

188  
ªä
;

189 
	}
}

202 
	$r›_show_keys
(
ªdisC⁄ãxt
 *
c⁄n
, * 
∑âîn
)

204 
i
 = 0;

205 
ªdisRïly
 *
ª∂y
 = 
NULL
;

207 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "key†%s", 
∑âîn
);

208 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

209 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]showáll keysánd data wrongÅype!\n");

210 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]showáŒ key†™d d©®wr⁄gÅy≥! %s\n", 
c⁄n
->
îr°r
);

211 
END
;

214 
i
 = 0; i < 
ª∂y
->
ñemíts
; ++i) {

215 
	`¥ötf
("======[%s]======\n", 
ª∂y
->
ñemít
[
i
]->
°r
);

219 
END
:

220 
	`‰ìRïlyObje˘
(
ª∂y
);

221 
	}
}

236 
	$r›_ªdis_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, 
RCOMMANDS
 
cmds
, 
cmd_num
)

238 
ªä
 = 0;

239 
i
 = 0;

240 
ªdisRïly
 *
ª∂y
 = 
NULL
;

244 
i
 = 0; i < 
cmd_num
; ++i) {

245 
ªä
 = 
	`ªdisAµídComm™d
(
c⁄n
, 
cmds
[
i
]);

246 i‡(
ªä
 !
REDIS_OK
) {

247 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]Aµíd Comm™d: %†ERROR!\n", 
cmds
[
i
]);

248 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Aµíd Comm™d: %†ERROR! %s\n", 
cmds
[
i
], 
c⁄n
->
îr°r
);

249 
ªä
 = -1;

250 
END
;

252 
ªä
 = 0;

256 
i
 = 0; i < 
cmd_num
; ++i) {

257 
ªä
 = 
	`ªdisGëRïly
(
c⁄n
, (**)&
ª∂y
);

258 i‡(
ªä
 !
REDIS_OK
) {

259 
ªä
 = -1;

260 
	`Ârötf
(
°dîr
, "[-][GMS_REDIS]Commô Comm™d:%†ERROR!\n", 
cmds
[
i
]);

261 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Commô Comm™d:%†ERROR! %s\n", 
cmds
[
i
], 
c⁄n
->
îr°r
);

262 
	`‰ìRïlyObje˘
(
ª∂y
);

265 
	`‰ìRïlyObje˘
(
ª∂y
);

266 
ªä
 = 0;

269 
END
:

270  
ªä
;

271 
	}
}

285 
	$r›_ªdis_comm™d
(
ªdisC⁄ãxt
 *
c⁄n
, *
cmd
)

287 
ªä
 = 0;

289 
ªdisRïly
 *
ª∂y
 = 
NULL
;

291 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, 
cmd
);

292 i‡(
ª∂y
 =
NULL
) {

293 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Comm™d : %†ERROR!%s\n", 
cmd
, 
c⁄n
->
îr°r
);

294 
ªä
 = -1;

297 
	`‰ìRïlyObje˘
(
ª∂y
);

299  
ªä
;

300 
	}
}

310 
	$r›_ã°_ª∂y_ty≥
(
ªdisRïly
 *
ª∂y
)

312 
ª∂y
->
ty≥
) {

313 
REDIS_REPLY_STATUS
:

314 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_STATUS=[string] useÑeply->strÅo get data,Ñeply->len get dataÜen\n");

316 
REDIS_REPLY_ERROR
:

317 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_ERROR=[string] useÑeply->strÅo get data,Ñeply->len get dateÜen\n");

319 
REDIS_REPLY_INTEGER
:

320 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_INTEGER=[longÜong] useÑeply->integerÅo get data\n");

322 
REDIS_REPLY_NIL
:

323 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_NIL=[] dataÇotÉxist\n");

325 
REDIS_REPLY_ARRAY
:

326 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_ARRAY=[array] useÑeply->elementsÅo getÇumber of data,Ñeply->element[index]Åo get (structÑedisReply*) Object\n");

328 
REDIS_REPLY_STRING
:

329 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[+][GMS_REDIS]=REDIS_REPLY_string=[string] useÑeply->strÅo get data,Ñeply->len get dataÜen\n");

332 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Can'tÖarseÅhisÅype\n");

335 
	}
}

350 
ªdisC⁄ãxt
* 
	$r›_c⁄√˘db_n›wd
(*
ù_°r
, * 
p‹t_°r
)

352 
ªdisC⁄ãxt
 *
c⁄n
 = 
NULL
;

353 
uöt16_t
 
p‹t
 = 
	`©oi
(
p‹t_°r
);

355 
c⁄n
 = 
	`ªdisC⁄√˘
(
ù_°r
, 
p‹t
);

357 i‡(
c⁄n
 =
NULL
) {

358 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ %s:%d Eº‹:C™'àÆloˇãÑedi†c⁄ãxt!\n", 
ù_°r
, 
p‹t
);

359 
END
;

362 i‡(
c⁄n
->
îr
) {

363 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ %s:%d Eº‹:%s\n", 
ù_°r
, 
p‹t
, 
c⁄n
->
îr°r
);

364 
	`ªdisFªe
(
c⁄n
);

365 
c⁄n
 = 
NULL
;

366 
END
;

369 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
,"[+][GMS_REDIS]C⁄√˘ %s:%d SUCCESS!\n", 
ù_°r
, 
p‹t
);

371 
END
:

372  
c⁄n
;

373 
	}
}

388 
ªdisC⁄ãxt
* 
	$r›_c⁄√˘db
(*
ù_°r
, * 
p‹t_°r
, *
pwd
)

390 
ªdisC⁄ãxt
 *
c⁄n
 = 
NULL
;

391 
uöt16_t
 
p‹t
 = 
	`©oi
(
p‹t_°r
);

392 
auth_cmd
[
REDIS_COMMAND_SIZE
];

394 
c⁄n
 = 
	`ªdisC⁄√˘
(
ù_°r
, 
p‹t
);

396 i‡(
c⁄n
 =
NULL
) {

397 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ %s:%d Eº‹:C™'àÆloˇãÑedi†c⁄ãxt!\n", 
ù_°r
, 
p‹t
);

398 
END
;

401 i‡(
c⁄n
->
îr
) {

402 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ %s:%d Eº‹:%s\n", 
ù_°r
, 
p‹t
, 
c⁄n
->
îr°r
);

403 
	`ªdisFªe
(
c⁄n
);

404 
c⁄n
 = 
NULL
;

405 
END
;

408 
ªdisRïly
 *
ª∂y
 = 
NULL
;

409 
	`•rötf
(
auth_cmd
, "auth %s", 
pwd
);

411 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, 
auth_cmd
);

412 i‡(
ª∂y
 =
NULL
) {

413 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Comm™d :áuth %†ERROR!\n", 
pwd
);

414 
c⁄n
 = 
NULL
;

415 
END
;

417 
	`‰ìRïlyObje˘
(
ª∂y
);

420 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
,"[+][GMS_REDIS]C⁄√˘ %s:%d SUCCESS!\n", 
ù_°r
, 
p‹t
);

422 
END
:

423  
c⁄n
;

424 
	}
}

437 
ªdisC⁄ãxt
* 
	$r›_c⁄√˘db_unix
(*
sock_∑th
, *
pwd
)

439 
ªdisC⁄ãxt
 *
c⁄n
 = 
NULL
;

440 
auth_cmd
[
REDIS_COMMAND_SIZE
];

442 
c⁄n
 = 
	`ªdisC⁄√˘Unix
(
sock_∑th
);

443 i‡(
c⁄n
 =
NULL
) {

444 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ domaö-unix:%†Eº‹:C™'àÆloˇãÑedi†c⁄ãxt!\n", 
sock_∑th
);

445 
END
;

448 i‡(
c⁄n
->
îr
) {

449 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ domaö-unix:%†Eº‹:%s\n", 
sock_∑th
, 
c⁄n
->
îr°r
);

450 
	`ªdisFªe
(
c⁄n
);

451 
c⁄n
 = 
NULL
;

452 
END
;

455 
ªdisRïly
 *
ª∂y
 = 
NULL
;

456 
	`•rötf
(
auth_cmd
, "auth %s", 
pwd
);

457 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, 
auth_cmd
);

458 i‡(
ª∂y
 =
NULL
) {

459 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Comm™d :áuth %†ERROR!\n", 
pwd
);

460 
c⁄n
 = 
NULL
;

461 
END
;

463 
	`‰ìRïlyObje˘
(
ª∂y
);

465 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
,"[+][GMS_REDIS]C⁄√˘ domaö-unix:%†SUCCESS!\n", 
sock_∑th
);

467 
END
:

468  
c⁄n
;

469 
	}
}

485 
ªdisC⁄ãxt
* 
	$r›_c⁄√˘db_timeout
(* 
ù_°r
, *
p‹t_°r
, 
timevÆ
 *
timeout
)

487 
ªdisC⁄ãxt
 *
c⁄n
 = 
NULL
;

488 
uöt16_t
 
p‹t
 = 
	`©oi
(
p‹t_°r
);

491 
c⁄n
 = 
	`ªdisC⁄√˘WôhTimeout
(
ù_°r
, 
p‹t
, *
timeout
);

493 i‡(
c⁄n
 =
NULL
) {

494 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ %s:%d Eº‹:C™'àÆloˇãÑedi†c⁄ãxt!\n", 
ù_°r
, 
p‹t
);

495 
END
;

498 i‡(
c⁄n
->
îr
) {

499 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]C⁄√˘ %s:%d Eº‹:%s\n", 
ù_°r
, 
p‹t
, 
c⁄n
->
îr°r
);

500 
	`ªdisFªe
(
c⁄n
);

501 
c⁄n
 = 
NULL
;

502 
END
;

505 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
,"[+][GMS_REDIS]C⁄√˘ %s:%d SUCCESS!\n", 
ù_°r
, 
p‹t
);

507 
END
:

508  
c⁄n
;

509 
	}
}

518 
	$r›_disc⁄√˘
(
ªdisC⁄ãxt
* 
c⁄n
)

520 i‡(
c⁄n
 =
NULL
) {

523 
	`ªdisFªe
(
c⁄n
);

525 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
,"[+][GMS_REDIS]Disconnect SUCCESS!\n");

526 
	}
}

529 * 
	$make_hm£t_comm™d
(* 
key
, 
ñemít_num
, 
RFIELDS
 
fõlds
, 
RVALUES
 
vÆues
)

531 *
cmd
 = 
NULL
;

532 
buf_size
 = 0;

533 
u£_size
 = 0;

534 
i
 = 0;

536 
cmd
 = (*)
	`mÆloc
(1024*1024);

537 i‡(
cmd
 =
NULL
) {

538 
END
;

540 
	`mem£t
(
cmd
, 0, 1024*1024);

541 
buf_size
 += 1024*1024;

543 
	`°∫ˇt
(
cmd
, "hmset", 6);

544 
u£_size
 += 5;

545 
	`°∫ˇt
(
cmd
, " ", 1);

546 
u£_size
 += 1;

548 
	`°∫ˇt
(
cmd
, 
key
, 200);

549 
u£_size
 += 200;

551 
i
 = 0; i < 
ñemít_num
; ++i) {

553 
	`°∫ˇt
(
cmd
, " ", 1);

554 
u£_size
 += 1;

555 i‡(
u£_size
 >
buf_size
) {

556 
cmd
 = 
	`ªÆloc
(cmd, 
u£_size
 + 1024*1024);

557 i‡(
cmd
 =
NULL
) {

558 
END
;

560 
buf_size
 += 1024*1024;

563 
	`°∫ˇt
(
cmd
, 
fõlds
[
i
], 
FIELD_ID_SIZE
);

564 
u£_size
 +
	`°æí
(
fõlds
[
i
]);

565 i‡(
u£_size
 >
buf_size
) {

566 
cmd
 = 
	`ªÆloc
(cmd, 
u£_size
 + 1024*1024);

567 i‡(
cmd
 =
NULL
) {

568 
END
;

570 
buf_size
 += 1024*1024;

574 
	`°∫ˇt
(
cmd
, " ", 1);

575 
u£_size
 += 1;

576 i‡(
u£_size
 >
buf_size
) {

577 
cmd
 = 
	`ªÆloc
(cmd, 
u£_size
 + 1024*1024);

578 i‡(
cmd
 =
NULL
) {

579 
END
;

581 
buf_size
 += 1024*1024;

584 
	`°∫ˇt
(
cmd
, 
vÆues
[
i
], 
VALUES_ID_SIZE
);

585 
u£_size
 +
	`°æí
(
vÆues
[
i
]);

586 i‡(
u£_size
 >
buf_size
) {

587 
cmd
 = 
	`ªÆloc
(cmd, 
u£_size
 + 1024*1024);

588 i‡(
cmd
 =
NULL
) {

589 
END
;

591 
buf_size
 += 1024*1024;

596 
END
:

597  
cmd
;

598 
	}
}

615 
	$r›_hash_£t_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
RFIELDS
 
fõlds
, 
RVALUES
 
vÆues
, 
vÆ_num
)

617 
ªä
 = 0;

618 
i
 = 0;

619 
ªdisRïly
 *
ª∂y
 = 
NULL
;

622 
i
 = 0; i < 
vÆ_num
; ++i) {

623 
ªä
 = 
	`ªdisAµídComm™d
(
c⁄n
, "h£à%†%†%s", 
key
, 
fõlds
[
i
], 
vÆues
[i]);

624 i‡(
ªä
 !
REDIS_OK
) {

625 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]HSET %†%†%†ERROR![%s]\n", 
key
, 
fõlds
[
i
], 
vÆues
[i], 
c⁄n
->
îr°r
);

626 
ªä
 = -1;

627 
END
;

629 
ªä
 = 0;

633 
i
 = 0; i < 
vÆ_num
; ++i) {

634 
ªä
 = 
	`ªdisGëRïly
(
c⁄n
, (**)&
ª∂y
);

635 i‡(
ªä
 !
REDIS_OK
) {

636 
ªä
 = -1;

637 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Commô HSET %†%†%†ERROR![%s]\n", 
key
, 
fõlds
[
i
], 
vÆues
[i], 
c⁄n
->
îr°r
);

638 
	`‰ìRïlyObje˘
(
ª∂y
);

641 
	`‰ìRïlyObje˘
(
ª∂y
);

642 
ªä
 = 0;

645 
END
:

646  
ªä
;

647 
	}
}

665 
	$r›_¸óã_‹_ª∂a˚_hash_èbÀ
(
ªdisC⁄ãxt
* 
c⁄n
,

666 * 
key
,

667 
ñemít_num
,

668 
RFIELDS
 
fõlds
,

669 
RVALUES
 
vÆues
)

671 
ªä
 = 0;

672 
ªdisRïly
 *
ª∂y
 = 
NULL
;

674 *
cmd
 = 
	`make_hm£t_comm™d
(
key
, 
ñemít_num
, 
fõlds
, 
vÆues
);

675 i‡(
cmd
 =
NULL
) {

676 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]¸óã hashÅabÀ %†îr‹\n", 
key
);

677 
ªä
 = -1;

678 
END_WITHOUT_FREE
;

681 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, 
cmd
);

683 i‡(
	`°rcmp
(
ª∂y
->
°r
, "OK") != 0) {

684 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Cª©êhashÅabÀ %†Eº‹:%s,%s\n", 
key
, 
ª∂y
->
°r
, 
c⁄n
->
îr°r
);

686 
ªä
 = -1;

687 
END
;

691 
END
:

692 
	`‰ì
(
cmd
);

693 
	`‰ìRïlyObje˘
(
ª∂y
);

695 
END_WITHOUT_FREE
:

697  
ªä
;

698 
	}
}

713 
	$r›_hö¸emít_⁄e_fõld
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, *
fõld
, 
num
)

715 
ªä
 = 0;

717 
ªdisRïly
 *
ª∂y
 = 
NULL
;

719 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "HINCRBY %†%†%d", 
key
, 
fõld
, 
num
);

720 i‡(
ª∂y
 =
NULL
) {

721 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]ö¸emíà%†%†îr‹ %s\n", 
key
, 
fõld
, 
c⁄n
->
îr°r
);

722 
ªä
 = -1;

723 
END
;

726 
END
:

727 
	`‰ìRïlyObje˘
(
ª∂y
);

729  
ªä
;

730 
	}
}

747 
	$r›_li°_push_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
RVALUES
 
vÆues
, 
vÆ_num
)

749 
ªä
 = 0;

750 
i
 = 0;

751 
ªdisRïly
 *
ª∂y
 = 
NULL
;

755 
i
 = 0; i < 
vÆ_num
; ++i) {

756 
ªä
 = 
	`ªdisAµídComm™d
(
c⁄n
, "Õush %†%s", 
key
, 
vÆues
[
i
]);

757 i‡(
ªä
 !
REDIS_OK
) {

758 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]PLUSH %†%†ERROR! %s\n", 
key
, 
vÆues
[
i
], 
c⁄n
->
îr°r
);

759 
ªä
 = -1;

760 
END
;

762 
ªä
 = 0;

766 
i
 = 0; i < 
vÆ_num
; ++i) {

767 
ªä
 = 
	`ªdisGëRïly
(
c⁄n
, (**)&
ª∂y
);

768 i‡(
ªä
 !
REDIS_OK
) {

769 
ªä
 = -1;

770 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Commô LPUSH %†%†ERROR! %s\n", 
key
, 
vÆues
[
i
], 
c⁄n
->
îr°r
);

771 
	`‰ìRïlyObje˘
(
ª∂y
);

774 
	`‰ìRïlyObje˘
(
ª∂y
);

775 
ªä
 = 0;

778 
END
:

779  
ªä
;

780 
	}
}

793 
	$r›_li°_push
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, *
vÆue
)

795 
ªä
 = 0;

796 
ªdisRïly
 *
ª∂y
 = 
NULL
;

798 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "LPUSH %†%s", 
key
, 
vÆue
);

800 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

801 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]LPUSH %†%†îr‹!%s\n", 
key
, 
vÆue
, 
c⁄n
->
îr°r
);

802 
ªä
 = -1;

805 
	`‰ìRïlyObje˘
(
ª∂y
);

806  
ªä
;

807 
	}
}

821 
	$r›_gë_li°_˙t
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
)

823 
˙t
 = 0;

825 
ªdisRïly
 *
ª∂y
 = 
NULL
;

827 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "LLEN %s", 
key
);

828 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_INTEGER
) {

829 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]LLEN %†îr‹ %s\n", 
key
, 
c⁄n
->
îr°r
);

830 
˙t
 = -1;

831 
END
;

834 
˙t
 = 
ª∂y
->
öãgî
;

836 
END
:

837 
	`‰ìRïlyObje˘
(
ª∂y
);

838  
˙t
;

839 
	}
}

861 
	$r›_åim_li°
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
begö
, 
íd
)

863 
ªä
 = 0;

864 
ªdisRïly
 *
ª∂y
 = 
NULL
;

866 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "LTRIM %†%d %d", 
key
, 
begö
, 
íd
);

867 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STATUS
) {

868 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]LTRIM %†%d %dÉº‹!%s\n", 
key
, 
begö
, 
íd
, 
c⁄n
->
îr°r
);

869 
ªä
 = -1;

872 
	`‰ìRïlyObje˘
(
ª∂y
);

873  
ªä
;

874 
	}
}

889 
	$r›_ønge_li°
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
‰om_pos
, 
cou¡
, 
RVALUES
 
vÆues
, *
gë_num
)

891 
ªä
 = 0;

892 
i
 = 0;

893 
ªdisRïly
 *
ª∂y
 = 
NULL
;

894 
max_cou¡
 = 0;

896 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "LRANGE %†%d %d", 
key
, 
‰om_pos
, 
cou¡
);

898 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_ARRAY
) {

899 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]LRANGE %†Éº‹!%s\n", 
key
, 
c⁄n
->
îr°r
);

900 
ªä
 = -1;

904 
max_cou¡
 = (
ª∂y
->
ñemíts
 > 
cou¡
) ? count:Ñeply->elements;

905 *
gë_num
 = 
max_cou¡
;

908 
i
 = 0; i < 
max_cou¡
; ++i) {

909 
	`°∫˝y
(
vÆues
[
i
], 
ª∂y
->
ñemít
[i]->
°r
, 
VALUES_ID_SIZE
-1);

912 
	`‰ìRïlyObje˘
(
ª∂y
);

913  
ªä
;

914 
	}
}

930 
	$r›_z£t_ö¸emít
(
ªdisC⁄ãxt
 *
c⁄n
, * 
key
, * 
membî
)

932 
ªä
 = 0;

934 
ªdisRïly
 *
ª∂y
 = 
NULL
;

936 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "ZINCRBY %†1 %s", 
key
, 
membî
);

938 i‡(
	`°rcmp
(
ª∂y
->
°r
, "OK") != 0) {

939 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Add o∏ö¸emíàèbÀ: %s,membî: %†Eº‹:%s,%s\n", 
key
, 
membî
,
ª∂y
->
°r
, 
c⁄n
->
îr°r
);

941 
ªä
 = -1;

942 
END
;

945 
END
:

946 
	`‰ìRïlyObje˘
(
ª∂y
);

947  
ªä
;

948 
	}
}

965 
	$r›_z£t_ö¸emít_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
RVALUES
 
vÆues
, 
vÆ_num
)

967 
ªä
 = 0;

968 
i
 = 0;

969 
ªdisRïly
 *
ª∂y
 = 
NULL
;

972 
i
 = 0; i < 
vÆ_num
; ++i) {

973 
ªä
 = 
	`ªdisAµídComm™d
(
c⁄n
, "ZINCRBY %†1 %s", 
key
, 
vÆues
[
i
]);

974 i‡(
ªä
 !
REDIS_OK
) {

975 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]ZINCRBY %†1 %†ERROR! %s\n", 
key
, 
vÆues
[
i
], 
c⁄n
->
îr°r
);

976 
ªä
 = -1;

977 
END
;

979 
ªä
 = 0;

983 
i
 = 0; i < 
vÆ_num
; ++i) {

984 
ªä
 = 
	`ªdisGëRïly
(
c⁄n
, (**)&
ª∂y
);

985 i‡(
ªä
 !
REDIS_OK
) {

986 
ªä
 = -1;

987 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]Commô ZINCRBY %†1 %†ERROR!%s\n", 
key
, 
vÆues
[
i
], 
c⁄n
->
îr°r
);

988 
	`‰ìRïlyObje˘
(
ª∂y
);

991 
	`‰ìRïlyObje˘
(
ª∂y
);

992 
ªä
 = 0;

995 
END
:

996  
ªä
;

997 
	}
}

999 
	$r›_z£t_gë_sc‹e
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, *
membî
)

1001 
sc‹e
 = 0;

1003 
ªdisRïly
 *
ª∂y
 = 
NULL
;

1005 
ª∂y
 = 
	`ªdisComm™d
(
c⁄n
, "ZSCORE %†%s", 
key
, 
membî
);

1006 
	`r›_ã°_ª∂y_ty≥
(
ª∂y
);

1008 i‡(
ª∂y
->
ty≥
 !
REDIS_REPLY_STRING
) {

1009 
	`LOG
(
REDIS_LOG_MODULE
, 
REDIS_LOG_PROC
, "[-][GMS_REDIS]ZSCORE %†%†îr‹ %s\n", 
key
, 
membî
,
c⁄n
->
îr°r
);

1010 
sc‹e
 = -1;

1011 
END
;

1014 
sc‹e
 = 
	`©oi
(
ª∂y
->
°r
);

1017 
END
:

1018 
	`‰ìRïlyObje˘
(
ª∂y
);

1020  
sc‹e
;

1021 
	}
}

	@redis_op.h

6 #i‚de‡
_REDIS_OP_H_


7 
	#_REDIS_OP_H_


	)

9 
	~"húedis.h
"

10 
	~"ªdis_keys.h
"

11 
	~<°dlib.h
>

12 
	~<°döt.h
>

13 
	~<°rög.h
>

14 
	~"make_log.h
"

17 
	#REDIS_LOG_MODULE
 "d©aba£"

	)

18 
	#REDIS_LOG_PROC
 "ªdis"

	)

20 
	#REDIS_COMMAND_SIZE
 300

	)

21 
	#FIELD_ID_SIZE
 100

	)

22 
	#VALUES_ID_SIZE
 1024

	)

23 (*
	gRCOMMANDS
)[
REDIS_COMMAND_SIZE
];

24 (*
	gRFIELDS
)[
FIELD_ID_SIZE
];

25 (*
	gRVALUES
)[
VALUES_ID_SIZE
];

40 
ªdisC⁄ãxt
* 
r›_c⁄√˘db_n›wd
(*
ù_°r
, * 
p‹t_°r
);

56 
ªdisC⁄ãxt
* 
r›_c⁄√˘db
(*
ù_°r
, * 
p‹t_°r
, *
pwd
);

70 
ªdisC⁄ãxt
* 
r›_c⁄√˘db_unix
(*
sock_∑th
, *
pwd
);

86 
ªdisC⁄ãxt
* 
r›_c⁄√˘db_timeout
(* 
ù_°r
, *
p‹t_°r
, 
timevÆ
 *
timeout
);

96 
r›_disc⁄√˘
(
ªdisC⁄ãxt
* 
c⁄n
);

110 
r›_£À˘d©aba£
(
ªdisC⁄ãxt
 *
c⁄n
, 
db_no
);

123 
r›_Êush_d©aba£
(
ªdisC⁄ãxt
 *
c⁄n
);

138 
r›_is_key_exi°
(
ªdisC⁄ãxt
 *
c⁄n
, * 
key
);

152 
r›_dñ_key
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
);

165 
r›_show_keys
(
ªdisC⁄ãxt
 *
c⁄n
, * 
∑âîn
);

180 
r›_£t_key_li„cy˛e
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
time_t
 
dñëe_time
);

198 
r›_¸óã_‹_ª∂a˚_hash_èbÀ
(
ªdisC⁄ãxt
* 
c⁄n
,

199 * 
key
,

200 
ñemít_num
,

201 
RFIELDS
 
fõlds
,

202 
RVALUES
 
vÆues
);

217 
r›_hö¸emít_⁄e_fõld
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, *
fõld
, 
num
);

235 
r›_hash_£t_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
RFIELDS
 
fõlds
, 
RVALUES
 
vÆues
, 
vÆ_num
);

251 
r›_z£t_ö¸emít
(
ªdisC⁄ãxt
 *
c⁄n
, * 
key
, * 
membî
);

255 
r›_z£t_gë_sc‹e
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, *
membî
);

272 
r›_z£t_ö¸emít_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
RVALUES
 
vÆues
, 
vÆ_num
);

288 
r›_li°_push_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
RVALUES
 
vÆues
, 
vÆ_num
);

301 
r›_li°_push
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, *
vÆue
);

315 
r›_gë_li°_˙t
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
);

336 
r›_åim_li°
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
begö
, 
íd
);

350 
r›_ønge_li°
(
ªdisC⁄ãxt
 *
c⁄n
, *
key
, 
‰om_pos
, 
cou¡
, 
RVALUES
 
vÆues
, *
gë_num
);

366 
r›_ªdis_≠≥nd
(
ªdisC⁄ãxt
 *
c⁄n
, 
RCOMMANDS
 
cmds
, 
cmd_num
);

381 
r›_ªdis_comm™d
(
ªdisC⁄ãxt
 *
c⁄n
, *
cmd
);

391 
r›_ã°_ª∂y_ty≥
(
ªdisRïly
 *
ª∂y
);

	@test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~"cJSON.h
"

7 
	$maö
()

9 
cJSON
* 
js⁄
 = 
	`cJSON_Cª©eObje˘
();

10 
	`cJSON_AddNumbîToObje˘
(
js⁄
, "ËÆøÈóÆÈáè", 100);

11 * 
out
 = 
	`cJSON_Pröt
(
js⁄
);

12 
	`¥ötf
("%s\n", 
out
);

13 
	`cJSON_Dñëe
(
js⁄
);

14 
	`‰ì
(
out
);

17 
	}
}

	@upload_cgi.c

1 
	~"fcgi_c⁄fig.h
"

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/waô.h
>

8 
	~"make_log.h
"

10 
	~"fcgi_°dio.h
"

11 
	~"utû_cgi.h
"

12 
	~<°ddef.h
>

13 
	~<°d¨g.h
>

14 
	~<as£π.h
>

15 
	~<húedis/húedis.h
>

17 
	$gë_ù
(* 
ù
, * 
⁄lyù
)

20 * 
p
 = 
NULL
;

21 
p
 = 
	`°r°r
(
ù
, "source ipáddress: ");

22 
p
 =Ö + 
	`°æí
("source ipáddress: ");

23 * 
begö
 = 
p
;

24 *
p
 != 'f')

26 
p
++;

28 
Àn
 = 
p
 - 
begö
;

29 
	`°∫˝y
(
⁄lyù
, 
begö
, 
Àn
);

31 
	}
}

34 
	$maö
 ()

36 *
fûe_buf
 = 
NULL
;

37 
bound¨y
[256] = {0};

38 
c⁄ã¡_ãxt
[256] = {0};

39 
fûíame
[256] = {0};

40 
fdfs_fûe_∑th
[256] = {0};

41 
fdfs_fûe_°©_buf
[256] = {0};

42 
fdfs_fûe_ho°_«me
[30] = {0};

43 
fdfs_fûe_uæ
[512] = {0};

44 
time_t
 
now
;;

47 
ªdisC⁄ãxt
* 
c
 = 
	`ªdisC⁄√˘
("127.0.0.1", 6379);

48 if(
c
->
îr
)

50 
	`ªdisFªe
(
c
);

55 
	`FCGI_Ac˚±
() >= 0) {

56 *
c⁄ã¡Lígth
 = 
	`gëív
("CONTENT_LENGTH");

57 
Àn
;

59 
	`¥ötf
("Content-type:Åext/html\r\n"

62 i‡(
c⁄ã¡Lígth
 !
NULL
) {

63 
Àn
 = 
	`°πﬁ
(
c⁄ã¡Lígth
, 
NULL
, 10);

66 
Àn
 = 0;

69 i‡(
Àn
 <= 0) {

70 
	`¥ötf
("No data from standard input\n");

73 
i
, 
ch
;

74 *
begö
 = 
NULL
;

75 *
íd
 = 
NULL
;

76 *
p
, *
q
, *
k
;

80 
fûe_buf
 = 
	`mÆloc
(
Àn
);

81 i‡(
fûe_buf
 =
NULL
) {

82 
	`¥ötf
("mallocÉrror! file size isÅo big!!!!\n");

86 
begö
 = 
fûe_buf
;

87 
p
 = 
begö
;

88 
i
 = 0; i < 
Àn
; i++) {

89 i‡((
ch
 = 
	`gëch¨
()) < 0) {

90 
	`¥ötf
("Error: NotÉnough bytesÑeceived on standard input<p>\n");

94 *
p
 = 
ch
;

95 
p
++;

100 
íd
 = 
p
;

102 
p
 = 
begö
;

105 
p
 = 
	`°r°r
(
begö
, "\r\n");

106 i‡(
p
 =
NULL
) {

107 
	`¥ötf
("wrongÇo boundary!\n");

108 
END
;

111 
	`°∫˝y
(
bound¨y
, 
begö
, 
p
-begin);

112 
bound¨y
[
p
-
begö
] = '\0';

115 
p
+=2;

117 
Àn
 -(
p
-
begö
);

120 
begö
 = 
p
;

122 
p
 = 
	`°r°r
(
begö
, "\r\n");

123 if(
p
 =
NULL
) {

124 
	`¥ötf
("ERROR: get contextÅextÉrror,Ço filename?\n");

125 
END
;

127 
	`°∫˝y
(
c⁄ã¡_ãxt
, 
begö
, 
p
-begin);

128 
c⁄ã¡_ãxt
[
p
-
begö
] = '\0';

131 
p
+=2;

132 
Àn
 -(
p
-
begö
);

137 
q
 = 
begö
;

138 
q
 = 
	`°r°r
(
begö
, "filename=");

140 
q
+=
	`°æí
("filename=");

141 
q
++;

143 
k
 = 
	`°rchr
(
q
, '"');

144 
	`°∫˝y
(
fûíame
, 
q
, 
k
-q);

145 
fûíame
[
k
-
q
] = '\0';

147 
	`åim_•a˚
(
fûíame
);

151 
begö
 = 
p
;

152 
p
 = 
	`°r°r
(
begö
, "\r\n");

153 
p
+=4;

154 
Àn
 -(
p
-
begö
);

156 
begö
 = 
p
;

159 
p
 = 
	`mem°r
(
begö
, 
Àn
, 
bound¨y
);

160 i‡(
p
 =
NULL
) {

161 
p
 = 
íd
-2;

164 
p
 =Ö -2;

172 
fd
 = 0;

173 
fd
 = 
	`›í
(
fûíame
, 
O_CREAT
|
O_WRONLY
, 0644);

174 i‡(
fd
 < 0) {

175 
	`¥ötf
("›í %†îr‹\n", 
fdfs_fûe_ho°_«me
);

176 
END
;

179 
	`·runˇã
(
fd
, (
p
-
begö
));

180 
	`wrôe
(
fd
, 
begö
, (
p
-begin));

181 
	`˛o£
(
fd
);

184 
fûe_id
[1024] = {0};

190 
pid_t
 
pid
;

191 
pfd
[2];

193 i‡(
	`pùe
(
pfd
) < 0) {

194 
	`¥ötf
("pipÉrror\n");

196 
pfd1
[2];

198 i‡(
	`pùe
(
pfd1
) < 0) {

199 
	`¥ötf
("pip1Érror\n");

206 
pid
 = 
	`f‹k
();

208 i‡(
pid
 < 0) {

209 
	`¥ötf
("forkÉrror\n");

216 i‡(
pid
 == 0) {

219 
	`˛o£
(
pfd
[0]);

220 
	`dup2
(
pfd
[1], 
STDOUT_FILENO
);

221 
	`exe˛p
("fdfs_u∂ﬂd_fûe", "fdfs_u∂ﬂd_fûe", "/ëc/fdfs/˛õ¡.c⁄f", 
fûíame
, 
NULL
);

223 
	`¥ötf
("execlp fdfs_upload_fileÉrror\n");

224 
	`˛o£
(
pfd
[1]);

229 
	`˛o£
(
pfd
[1]);

230 
	`waô
(
NULL
);

233 
	`ªad
(
pfd
[0], 
fûe_id
, 1024);

239 
fd
 = 
	`›í
("fûe.txt", 
O_CREAT
|
O_WRONLY
, 0644);

240 i‡(
fd
 < 0) {

241 
	`¥ötf
("›í %†îr‹\n", 
fdfs_fûe_ho°_«me
);

242 
END
;

244 
	`wrôe
(
fd
, 
fûe_id
, 
	`°æí
(file_id));

245 
	`åim_•a˚
(
fûe_id
);

246 
	`˛o£
(
fd
);

247 
pid
 = 
	`f‹k
();

248 if(
pid
 == 0)

250 
	`˛o£
(
pfd1
[0]);

251 
	`dup2
(
pfd1
[1], 
STDOUT_FILENO
);

252 
	`exe˛p
("fdfs_fûe_öfo", "fdfs_fûe_öfo", "/ëc/fdfs/˛õ¡.c⁄f", 
fûe_id
, 
NULL
);

253 
	`¥ötf
("execlp fdfs_upload_fileÉrror\n");

254 
	`˛o£
(
pfd1
[1]);

256 
	`˛o£
(
pfd1
[1]);

257 
	`waô
(
NULL
);

258 
ù
[128] = { 0 };

259 
	`ªad
(
pfd1
[0], 
ù
, (ip));

260 
	`˛o£
(
pfd1
[0]);

261 
fûe_uæ
[1024] = { 0 };

263 
⁄lyù
[128] = { 0 };

264 
	`gë_ù
(
ù
, 
⁄lyù
);

265 
	`åim_•a˚
(
⁄lyù
);

266 
	`•rötf
(
fûe_uæ
, "hâp://%s/%s", 
⁄lyù
, 
fûe_id
);

267 
	`¥ötf
("%s", 
fûe_uæ
);

272 
ªdisRïly
* 
r
 = 
	`ªdisComm™d
(
c
, "h£àFILE_URL %†%s", 
fûíame
, 
fûe_uæ
);

273 if(
r
->
ty≥
 !
REDIS_REPLY_INTEGER
)

275 
	`‰ìRïlyObje˘
(
r
);

276 
	`ªdisFªe
(
c
);

277 
	`exô
(1);

279 
	`‰ìRïlyObje˘
(
r
);

284 
END
:

286 
	`mem£t
(
bound¨y
, 0, 256);

287 
	`mem£t
(
c⁄ã¡_ãxt
, 0, 256);

288 
	`mem£t
(
fûíame
, 0, 256);

289 
	`mem£t
(
fdfs_fûe_∑th
, 0, 256);

290 
	`mem£t
(
fdfs_fûe_°©_buf
, 0, 256);

291 
	`mem£t
(
fdfs_fûe_ho°_«me
, 0, 30);

292 
	`mem£t
(
fdfs_fûe_uæ
, 0, 512);

294 
	`‰ì
(
fûe_buf
);

300 
	`ªdisFªe
(
c
);

302 
	}
}

	@util_cgi.c

1 
	~"utû_cgi.h
"

2 
	~"make_log.h
"

4 
	gg_ho°_«me
[
HOST_NAME_LEN
] = "http://192.168.2.102";

9 * 
	$mem°r
(* 
fuŒ_d©a
, 
fuŒ_d©a_Àn
, * 
sub°r
)

11 i‡(
fuŒ_d©a
 =
NULL
 || 
fuŒ_d©a_Àn
 <0 || 
sub°r
 == NULL) {

12  
NULL
;

15 i‡(*
sub°r
 == '\0') {

16  
NULL
;

19 
subÀn
 = 
	`°æí
(
sub°r
);

21 
i
;

22 * 
cur
 = 
fuŒ_d©a
;

23 
œ°_possibÀ
 = 
fuŒ_d©a_Àn
 - 
subÀn
 + 1;

24 
i
 = 0; i < 
œ°_possibÀ
; i++) {

25 i‡(*
cur
 =*
sub°r
) {

27 i‡(
	`memcmp
(
cur
, 
sub°r
, 
subÀn
) == 0) {

29  
cur
;

32 
cur
++;

35  
NULL
;

36 
	}
}

38 
	$cgi_öô
()

40 
fd
 = 0;

41 
°©
 
°_buf
;

42 
Àn
 = 0;

44 
fd
 = 
	`›í
("./c⁄f/HOST_NAME", 
O_RDONLY
);

45 i‡(
fd
 < 0) {

50 
	`f°©
(
fd
, &
°_buf
);

51 
Àn
 = 
°_buf
.
°_size
;

53 
	`ªad
(
fd
, 
g_ho°_«me
, 
Àn
);

54 
	`åim_•a˚
(
g_ho°_«me
);

55 
	`˛o£
(
fd
);

57 
	}
}

63 
	$gë_fûe_suffix
(c⁄° *
fûe_«me
, *
suffix
)

65 c⁄° *
p
 = 
fûe_«me
;

66 
Àn
 = 0;

67 c⁄° *
q
=
NULL
;

68 c⁄° *
k

NULL
;

70 i‡(
p
 =
NULL
) {

74 
q
 = 
p
;

79 *
q
 != '\0') {

80 
q
++;

83 
k
 = 
q
;

84 *
k
 !'.' && k !
p
) {

85 
k
--;

88 i‡(*
k
 == '.') {

89 
k
++;

90 
Àn
 = 
q
 - 
k
;

92 i‡(
Àn
 != 0) {

93 
	`°∫˝y
(
suffix
, 
k
, 
Àn
);

94 
suffix
[
Àn
] = '\0';

97 
	`°∫˝y
(
suffix
, "null", 5);

101 
	`°∫˝y
(
suffix
, "null", 5);

105 
	}
}

114 
	$quîy_∑r£_key_vÆue
(c⁄° *
quîy
, c⁄° *
key
, *
vÆue
, *
vÆue_Àn_p
)

116 *
ãmp
 = 
NULL
;

117 *
íd
 = 
NULL
;

118 
vÆue_Àn
 =0;

122 
ãmp
 = 
	`°r°r
(
quîy
, 
key
);

123 i‡(
ãmp
 =
NULL
) {

129 
ãmp
+=
	`°æí
(
key
);

130 
ãmp
++;

134 
íd
 = 
ãmp
;

136 '\0' !*
íd
 && '#' != *end && '&' != *end ) {

137 
íd
++;

140 
vÆue_Àn
 = 
íd
-
ãmp
;

142 
	`°∫˝y
(
vÆue
, 
ãmp
, 
vÆue_Àn
);

143 
vÆue
[
vÆue_Àn
] ='\0';

145 i‡(
vÆue_Àn_p
 !
NULL
) {

146 *
vÆue_Àn_p
 = 
vÆue_Àn
;

150 
	}
}

161 
	$åim_•a˚
(*
öbuf
)

163 
i
 = 0;

164 
j
 = 
	`°æí
(
öbuf
) - 1;

166 *
°r
 = 
öbuf
;

168 
cou¡
 = 0;

170 i‡(
°r
 =
NULL
 ) {

176 
	`is•a˚
(
°r
[
i
]) && str[i] != '\0') {

177 
i
++;

180 
	`is•a˚
(
°r
[
j
]Ë&& j > 
i
) {

181 
j
--;

184 
cou¡
 = 
j
 - 
i
 + 1;

186 
	`°∫˝y
(
öbuf
, 
°r
 + 
i
, 
cou¡
);

188 
öbuf
[
cou¡
] = '\0';

191 
	}
}

207 * 
	$gë_vÆue_by_cﬁ
(*
löe_hód
, 
cﬁ
, *
vÆue
, 
max_Àn
, 
wôh_quŸe
)

209 *
pos
 = 
NULL
;

210 *
vÆue_hód
 = 
NULL
;

211 
tmp_cﬁ
 = 0;

212 
vÆue_Àn
 = 0;

215 i‡(
cﬁ
 < 1) {

216 
	`Ârötf
(
°dîr
, "col must >= 1\n");

217 
END
;

221 --
max_Àn
;

224 i‡(
cﬁ
 == 1) {

225 
pos
 = 
löe_hód
, 
vÆue_hód
 =Üine_head; *pos != '|' && *(pos-1) != '\\'; ++pos);

226 i‡(
wôh_quŸe
 == 1) {

227 
vÆue_Àn
 = ((
pos
 - 
löe_hód
 - 2Ë> 
max_Àn
) ? max_len: (pos-line_head-2);

228 
	`mem˝y
(
vÆue
, 
löe_hód
+1, 
vÆue_Àn
);

231 
vÆue_Àn
 = ((
pos
 - 
löe_hód
Ë> 
max_Àn
) ? max_len: (pos-line_head);

232 
	`mem˝y
(
vÆue
, 
löe_hód
, 
vÆue_Àn
);

234 
vÆue
[
vÆue_Àn
] = '\0';

235 
END
;

239 
pos
 = 
löe_hód
, 
vÆue_hód
 =Üine_head; ; ++pos) {

240 i‡((*
pos
 == '|' && *(pos-1) != '\\') || *pos == '\n') {

241 ++
tmp_cﬁ
;

242 i‡(
tmp_cﬁ
 =
cﬁ
) {

243 i‡(
wôh_quŸe
 == 1) {

244 
vÆue_Àn
 = ((
pos
-
vÆue_hód
-2)>
max_Àn
) ? max_len: (pos-value_head-2);

245 
	`mem˝y
(
vÆue
, 
vÆue_hód
+1, 
vÆue_Àn
);

248 
vÆue_Àn
 = ((
pos
-
vÆue_hód
)>
max_Àn
) ? max_len: (pos-value_head);

249 
	`mem˝y
(
vÆue
, 
vÆue_hód
, 
vÆue_Àn
);

251 
vÆue
[
vÆue_Àn
] = '\0';

252 
END
;

254 
vÆue_hód
 = 
pos
+1;

255 i‡(*
pos
 == '\n') {

262 
	`Ârötf
(
°dîr
, "expend colum !\n");

263 
vÆue
 = 
NULL
;

265 
END
:

266  
vÆue
;

267 
	}
}

270 
	$°r_ª∂a˚
(* 
°rSrc
, * 
°rFöd
, * 
°rRïœ˚
)

272 *
°rSrc
 != '\0')

274 i‡(*
°rSrc
 =*
°rFöd
)

276 i‡(
	`°∫cmp
(
°rSrc
, 
°rFöd
, 
	`°æí
(strFind)) == 0)

278 
i
 = 0;

279 *
q
 = 
NULL
;

280 *
p
 = 
NULL
;

281 *
ª∂
 = 
NULL
;

282 
œ°Lí
 = 0;

284 
i
 = 
	`°æí
(
°rFöd
);

285 
q
 = 
°rSrc
+
i
;

286 
p
 = 
q
;

287 
ª∂
 = 
°rRïœ˚
;

289 *
q
++ != '\0')

290 
œ°Lí
++;

291 * 
ãmp
 = 
	`mÆloc
(
œ°Lí
+1);

292 
k
 = 0;

293 
k
 = 0; k < 
œ°Lí
; k++)

295 *(
ãmp
+
k
Ë*(
p
+k);

297 *(
ãmp
+
œ°Lí
) = '\0';

298 *
ª∂
 != '\0')

300 *
°rSrc
++ = *
ª∂
++;

302 
p
 = 
°rSrc
;

303 * 
pTemp
 = 
ãmp
;

304 *
pTemp
 != '\0')

306 *
p
++ = *
pTemp
++;

308 
	`‰ì
(
ãmp
);

309 *
p
 = '\0';

312 
°rSrc
++;

315 
°rSrc
++;

317 
	}
}

	@util_cgi.h

1 #i‚de‡
_UTIL_CGI_H_


2 
	#_UTIL_CGI_H_


	)

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<°rög.h
>

7 
	~<˘y≥.h
>

8 
	~<uni°d.h
>

9 
	~<sys/°©.h
>

10 
	~<f˙é.h
>

12 
	~"make_log.h
"

14 
	#HOST_NAME_LEN
 (128)

	)

15 
	#FILE_NAME_LEN
 (256)

	)

16 
	#PIC_URL_LEN
 (256)

	)

17 
	#PIC_NAME_LEN
 (10)

	)

18 
	#FILE_URL_LEN
 (512)

	)

20 
	#UTIL_LOG_MODULE
 "utû"

	)

21 
	#UTIL_LOG_PROC
 "ba£"

	)

25 
cgi_öô
();

27 
°r_ª∂a˚
(* 
°rSrc
, * 
°rFöd
, * 
°rRïœ˚
);

30 * 
mem°r
(* 
fuŒ_d©a
, 
fuŒ_d©a_Àn
, * 
sub°r
);

35 
gë_fûe_suffix
(c⁄° *
fûe_«me
, *
suffix
);

43 
quîy_∑r£_key_vÆue
(c⁄° *
quîy
, c⁄° *
key
, *
vÆue
, *
vÆue_Àn_p
);

55 
åim_•a˚
(*
öbuf
);

71 * 
gë_vÆue_by_cﬁ
(*
löe_hód
, 
cﬁ
, *
vÆue
, 
max_Àn
, 
wôh_quŸe
);

	@
1
.
0
15
197
cJSON.c
cJSON.h
echo.c
fastDFS_test/make_log.c
fastDFS_test/make_log.h
fastDFS_test/test_client.c
make_log.c
make_log.h
redis_keys.h
redis_op.c
redis_op.h
test.c
upload_cgi.c
util_cgi.c
util_cgi.h
