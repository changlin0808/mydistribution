!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall $/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS=-I .\/$/;"	m
EVENT_TYPE_OTHER	redis_keys.h	48;"	d
EVENT_TYPE_TXT	redis_keys.h	47;"	d
FIELD_ID_SIZE	echo.c	41;"	d	file:
FIELD_ID_SIZE	redis_op.h	21;"	d
FILE_HOT_ZSET	redis_keys.h	37;"	d
FILE_ID_LEN	fastDFS_test/test_client.c	14;"	d	file:
FILE_INFO_LIST	redis_keys.h	26;"	d
FILE_NAME_LEN	util_cgi.h	15;"	d
FILE_TYPE_BMP	redis_keys.h	43;"	d
FILE_TYPE_MEDIA	redis_keys.h	46;"	d
FILE_TYPE_VEDIO	redis_keys.h	45;"	d
FILE_TYPE_ZIP	redis_keys.h	44;"	d
FILE_URL_LEN	util_cgi.h	18;"	d
HOST_NAME_LEN	util_cgi.h	14;"	d
KEY_NAME_SIZ	redis_keys.h	10;"	d
LIBS	Makefile	/^LIBS=-lfcgi -lhiredis$/;"	m
LOG	fastDFS_test/make_log.h	10;"	d
LOG	fastDFS_test/make_log.h	15;"	d
LOG	make_log.h	10;"	d
LOG	make_log.h	15;"	d
LOG_MODULE	fastDFS_test/test_client.c	10;"	d	file:
LOG_PROC	fastDFS_test/test_client.c	11;"	d	file:
PIC_NAME_LEN	util_cgi.h	17;"	d
PIC_URL_LEN	util_cgi.h	16;"	d
RCOMMANDS	redis_op.h	/^typedef char (*RCOMMANDS)[REDIS_COMMAND_SIZE];\/* redis 存放批量 命令字符串数组类型 *\/$/;"	t
REDIS_COMMAND_SIZE	echo.c	40;"	d	file:
REDIS_COMMAND_SIZE	redis_op.h	20;"	d
REDIS_DILIMT	redis_keys.h	11;"	d
REDIS_DILIMT_SIZ	redis_keys.h	12;"	d
REDIS_LOG_MODULE	echo.c	37;"	d	file:
REDIS_LOG_MODULE	redis_op.h	17;"	d
REDIS_LOG_PROC	echo.c	38;"	d	file:
REDIS_LOG_PROC	redis_op.h	18;"	d
RFIELDS	redis_op.h	/^typedef char (*RFIELDS)[FIELD_ID_SIZE];        \/* redis hash表存放批量field字符串数组类型 *\/$/;"	t
RVALUES	redis_op.h	/^typedef char (*RVALUES)[VALUES_ID_SIZE];    \/* redis 表存放批量value字符串数组类型 *\/$/;"	t
UTIL_LOG_MODULE	util_cgi.h	20;"	d
UTIL_LOG_PROC	util_cgi.h	21;"	d
VALUES_ID_SIZE	echo.c	42;"	d	file:
VALUES_ID_SIZE	redis_op.h	22;"	d
_MAKE_LOG_H	fastDFS_test/make_log.h	2;"	d
_MAKE_LOG_H	make_log.h	2;"	d
_REDIS_KEYS_H_	redis_keys.h	7;"	d
_REDIS_OP_H_	redis_op.h	7;"	d
_UTIL_CGI_H_	util_cgi.h	2;"	d
buffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:
cJSON	cJSON.h	/^typedef struct cJSON {$/;"	s
cJSON	cJSON.h	/^} cJSON;$/;"	t	typeref:struct:cJSON
cJSON_AddBoolToObject	cJSON.h	136;"	d
cJSON_AddFalseToObject	cJSON.h	135;"	d
cJSON_AddItemReferenceToArray	cJSON.c	/^void	cJSON_AddItemReferenceToArray(cJSON *array, cJSON *item)						{cJSON_AddItemToArray(array,create_reference(item));}$/;"	f
cJSON_AddItemReferenceToObject	cJSON.c	/^void	cJSON_AddItemReferenceToObject(cJSON *object,const char *string,cJSON *item)	{cJSON_AddItemToObject(object,string,create_reference(item));}$/;"	f
cJSON_AddItemToArray	cJSON.c	/^void   cJSON_AddItemToArray(cJSON *array, cJSON *item)						{cJSON *c=array->child;if (!item) return; if (!c) {array->child=item;} else {while (c && c->next) c=c->next; suffix_object(c,item);}}$/;"	f
cJSON_AddItemToObject	cJSON.c	/^void   cJSON_AddItemToObject(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (item->string) cJSON_free(item->string);item->string=cJSON_strdup(string);cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddItemToObjectCS	cJSON.c	/^void   cJSON_AddItemToObjectCS(cJSON *object,const char *string,cJSON *item)	{if (!item) return; if (!(item->type&cJSON_StringIsConst) && item->string) cJSON_free(item->string);item->string=(char*)string;item->type|=cJSON_StringIsConst;cJSON_AddItemToArray(object,item);}$/;"	f
cJSON_AddNullToObject	cJSON.h	133;"	d
cJSON_AddNumberToObject	cJSON.h	137;"	d
cJSON_AddStringToObject	cJSON.h	138;"	d
cJSON_AddTrueToObject	cJSON.h	134;"	d
cJSON_Array	cJSON.h	37;"	d
cJSON_CreateArray	cJSON.c	/^cJSON *cJSON_CreateArray(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Array;return item;}$/;"	f
cJSON_CreateBool	cJSON.c	/^cJSON *cJSON_CreateBool(int b)					{cJSON *item=cJSON_New_Item();if(item)item->type=b?cJSON_True:cJSON_False;return item;}$/;"	f
cJSON_CreateDoubleArray	cJSON.c	/^cJSON *cJSON_CreateDoubleArray(const double *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateFalse	cJSON.c	/^cJSON *cJSON_CreateFalse(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_False;return item;}$/;"	f
cJSON_CreateFloatArray	cJSON.c	/^cJSON *cJSON_CreateFloatArray(const float *numbers,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateIntArray	cJSON.c	/^cJSON *cJSON_CreateIntArray(const int *numbers,int count)		{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateNumber(numbers[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateNull	cJSON.c	/^cJSON *cJSON_CreateNull(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_NULL;return item;}$/;"	f
cJSON_CreateNumber	cJSON.c	/^cJSON *cJSON_CreateNumber(double num)			{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_Number;item->valuedouble=num;item->valueint=(int)num;}return item;}$/;"	f
cJSON_CreateObject	cJSON.c	/^cJSON *cJSON_CreateObject(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_Object;return item;}$/;"	f
cJSON_CreateString	cJSON.c	/^cJSON *cJSON_CreateString(const char *string)	{cJSON *item=cJSON_New_Item();if(item){item->type=cJSON_String;item->valuestring=cJSON_strdup(string);}return item;}$/;"	f
cJSON_CreateStringArray	cJSON.c	/^cJSON *cJSON_CreateStringArray(const char **strings,int count)	{int i;cJSON *n=0,*p=0,*a=cJSON_CreateArray();for(i=0;a && i<count;i++){n=cJSON_CreateString(strings[i]);if(!i)a->child=n;else suffix_object(p,n);p=n;}return a;}$/;"	f
cJSON_CreateTrue	cJSON.c	/^cJSON *cJSON_CreateTrue(void)					{cJSON *item=cJSON_New_Item();if(item)item->type=cJSON_True;return item;}$/;"	f
cJSON_Delete	cJSON.c	/^void cJSON_Delete(cJSON *c)$/;"	f
cJSON_DeleteItemFromArray	cJSON.c	/^void   cJSON_DeleteItemFromArray(cJSON *array,int which)			{cJSON_Delete(cJSON_DetachItemFromArray(array,which));}$/;"	f
cJSON_DeleteItemFromObject	cJSON.c	/^void   cJSON_DeleteItemFromObject(cJSON *object,const char *string) {cJSON_Delete(cJSON_DetachItemFromObject(object,string));}$/;"	f
cJSON_DetachItemFromArray	cJSON.c	/^cJSON *cJSON_DetachItemFromArray(cJSON *array,int which)			{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return 0;$/;"	f
cJSON_DetachItemFromObject	cJSON.c	/^cJSON *cJSON_DetachItemFromObject(cJSON *object,const char *string) {int i=0;cJSON *c=object->child;while (c && cJSON_strcasecmp(c->string,string)) i++,c=c->next;if (c) return cJSON_DetachItemFromArray(object,i);return 0;}$/;"	f
cJSON_Duplicate	cJSON.c	/^cJSON *cJSON_Duplicate(cJSON *item,int recurse)$/;"	f
cJSON_False	cJSON.h	32;"	d
cJSON_GetArrayItem	cJSON.c	/^cJSON *cJSON_GetArrayItem(cJSON *array,int item)				{cJSON *c=array->child;  while (c && item>0) item--,c=c->next; return c;}$/;"	f
cJSON_GetArraySize	cJSON.c	/^int    cJSON_GetArraySize(cJSON *array)							{cJSON *c=array->child;int i=0;while(c)i++,c=c->next;return i;}$/;"	f
cJSON_GetErrorPtr	cJSON.c	/^const char *cJSON_GetErrorPtr(void) {return ep;}$/;"	f
cJSON_GetObjectItem	cJSON.c	/^cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)	{cJSON *c=object->child; while (c && cJSON_strcasecmp(c->string,string)) c=c->next; return c;}$/;"	f
cJSON_Hooks	cJSON.h	/^typedef struct cJSON_Hooks {$/;"	s
cJSON_Hooks	cJSON.h	/^} cJSON_Hooks;$/;"	t	typeref:struct:cJSON_Hooks
cJSON_InitHooks	cJSON.c	/^void cJSON_InitHooks(cJSON_Hooks* hooks)$/;"	f
cJSON_InsertItemInArray	cJSON.c	/^void   cJSON_InsertItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) {cJSON_AddItemToArray(array,newitem);return;}$/;"	f
cJSON_IsReference	cJSON.h	39;"	d
cJSON_Minify	cJSON.c	/^void cJSON_Minify(char *json)$/;"	f
cJSON_NULL	cJSON.h	34;"	d
cJSON_New_Item	cJSON.c	/^static cJSON *cJSON_New_Item(void)$/;"	f	file:
cJSON_Number	cJSON.h	35;"	d
cJSON_Object	cJSON.h	38;"	d
cJSON_Parse	cJSON.c	/^cJSON *cJSON_Parse(const char *value) {return cJSON_ParseWithOpts(value,0,0);}$/;"	f
cJSON_ParseWithOpts	cJSON.c	/^cJSON *cJSON_ParseWithOpts(const char *value,const char **return_parse_end,int require_null_terminated)$/;"	f
cJSON_Print	cJSON.c	/^char *cJSON_Print(cJSON *item)				{return print_value(item,0,1,0);}$/;"	f
cJSON_PrintBuffered	cJSON.c	/^char *cJSON_PrintBuffered(cJSON *item,int prebuffer,int fmt)$/;"	f
cJSON_PrintUnformatted	cJSON.c	/^char *cJSON_PrintUnformatted(cJSON *item)	{return print_value(item,0,0,0);}$/;"	f
cJSON_ReplaceItemInArray	cJSON.c	/^void   cJSON_ReplaceItemInArray(cJSON *array,int which,cJSON *newitem)		{cJSON *c=array->child;while (c && which>0) c=c->next,which--;if (!c) return;$/;"	f
cJSON_ReplaceItemInObject	cJSON.c	/^void   cJSON_ReplaceItemInObject(cJSON *object,const char *string,cJSON *newitem){int i=0;cJSON *c=object->child;while(c && cJSON_strcasecmp(c->string,string))i++,c=c->next;if(c){newitem->string=cJSON_strdup(string);cJSON_ReplaceItemInArray(object,i,newitem);}}$/;"	f
cJSON_SetIntValue	cJSON.h	141;"	d
cJSON_SetNumberValue	cJSON.h	142;"	d
cJSON_String	cJSON.h	36;"	d
cJSON_StringIsConst	cJSON.h	40;"	d
cJSON_True	cJSON.h	33;"	d
cJSON__h	cJSON.h	24;"	d
cJSON_free	cJSON.c	/^static void (*cJSON_free)(void *ptr) = free;$/;"	v	file:
cJSON_malloc	cJSON.c	/^static void *(*cJSON_malloc)(size_t sz) = malloc;$/;"	v	file:
cJSON_strcasecmp	cJSON.c	/^static int cJSON_strcasecmp(const char *s1,const char *s2)$/;"	f	file:
cJSON_strdup	cJSON.c	/^static char* cJSON_strdup(const char* str)$/;"	f	file:
ca_log_lock	fastDFS_test/make_log.c	/^pthread_mutex_t ca_log_lock=PTHREAD_MUTEX_INITIALIZER;$/;"	v
ca_log_lock	make_log.c	/^pthread_mutex_t ca_log_lock=PTHREAD_MUTEX_INITIALIZER;$/;"	v
cgi_init	util_cgi.c	/^void cgi_init(void)$/;"	f
child	cJSON.h	/^	struct cJSON *child;		\/* An array or object item will have a child pointer pointing to a chain of the items in the array\/object. *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
create_reference	cJSON.c	/^static cJSON *create_reference(cJSON *item) {cJSON *ref=cJSON_New_Item();if (!ref) return 0;memcpy(ref,item,sizeof(cJSON));ref->string=0;ref->type|=cJSON_IsReference;ref->next=ref->prev=0;return ref;}$/;"	f	file:
dumpmsg_to_file	fastDFS_test/make_log.c	/^int dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,$/;"	f
dumpmsg_to_file	make_log.c	/^int dumpmsg_to_file(char *module_name, char *proc_name, const char *filename,$/;"	f
ensure	cJSON.c	/^static char* ensure(printbuffer *p,int needed)$/;"	f	file:
ep	cJSON.c	/^static const char *ep;$/;"	v	file:
firstByteMark	cJSON.c	/^static const unsigned char firstByteMark[7] = { 0x00, 0x00, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC };$/;"	v	file:
free_fn	cJSON.h	/^      void (*free_fn)(void *ptr);$/;"	m	struct:cJSON_Hooks
g_host_name	util_cgi.c	/^char g_host_name[HOST_NAME_LEN] = "http:\/\/192.168.2.102";$/;"	v
get_file_suffix	util_cgi.c	/^int get_file_suffix(const char *file_name, char *suffix)$/;"	f
get_ip	upload_cgi.c	/^void get_ip(char* ip, char* onlyip)$/;"	f
get_value_by_col	util_cgi.c	/^char* get_value_by_col(char *line_head, int col, char *value, int max_len, char with_quote)$/;"	f
length	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:
main	echo.c	/^int main ()$/;"	f
main	fastDFS_test/test_client.c	/^int main(int argc, char *argv[])$/;"	f
main	test.c	/^int main()$/;"	f
main	upload_cgi.c	/^int main ()$/;"	f
make_hmset_command	redis_op.c	/^static char* make_hmset_command(char* key, unsigned int element_num, RFIELDS fields, RVALUES values)$/;"	f	file:
make_path	fastDFS_test/make_log.c	/^int make_path(char *path, char *module_name, char *proc_name)$/;"	f
make_path	make_log.c	/^int make_path(char *path, char *module_name, char *proc_name)$/;"	f
malloc_fn	cJSON.h	/^      void *(*malloc_fn)(size_t sz);$/;"	m	struct:cJSON_Hooks
memstr	util_cgi.c	/^char* memstr(char* full_data, int full_data_len, char* substr) $/;"	f
next	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::cJSON
offset	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	m	struct:__anon1	file:
out_put_file	fastDFS_test/make_log.c	/^int out_put_file(char *path, char *buf)$/;"	f
out_put_file	make_log.c	/^int out_put_file(char *path, char *buf)$/;"	f
parse_array	cJSON.c	/^static const char *parse_array(cJSON *item,const char *value)$/;"	f	file:
parse_hex4	cJSON.c	/^static unsigned parse_hex4(const char *str)$/;"	f	file:
parse_number	cJSON.c	/^static const char *parse_number(cJSON *item,const char *num)$/;"	f	file:
parse_object	cJSON.c	/^static const char *parse_object(cJSON *item,const char *value)$/;"	f	file:
parse_string	cJSON.c	/^static const char *parse_string(cJSON *item,const char *str)$/;"	f	file:
parse_value	cJSON.c	/^static const char *parse_value(cJSON *item,const char *value)$/;"	f	file:
pow2gt	cJSON.c	/^static int pow2gt (int x)	{	--x;	x|=x>>1;	x|=x>>2;	x|=x>>4;	x|=x>>8;	x|=x>>16;	return x+1;	}$/;"	f	file:
prev	cJSON.h	/^	struct cJSON *next,*prev;	\/* next\/prev allow you to walk array\/object chains. Alternatively, use GetArraySize\/GetArrayItem\/GetObjectItem *\/$/;"	m	struct:cJSON	typeref:struct:cJSON::
print_array	cJSON.c	/^static char *print_array(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
print_number	cJSON.c	/^static char *print_number(cJSON *item,printbuffer *p)$/;"	f	file:
print_object	cJSON.c	/^static char *print_object(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
print_string	cJSON.c	/^static char *print_string(cJSON *item,printbuffer *p)	{return print_string_ptr(item->valuestring,p);}$/;"	f	file:
print_string_ptr	cJSON.c	/^static char *print_string_ptr(const char *str,printbuffer *p)$/;"	f	file:
print_value	cJSON.c	/^static char *print_value(cJSON *item,int depth,int fmt,printbuffer *p)$/;"	f	file:
printbuffer	cJSON.c	/^typedef struct {char *buffer; int length; int offset; } printbuffer;$/;"	t	typeref:struct:__anon1	file:
query_parse_key_value	util_cgi.c	/^int query_parse_key_value(const char *query, const char *key, char *value, int *value_len_p)$/;"	f
rcsid	echo.c	/^static const char rcsid[] = "$Id: echo.c,v 1.5 1999\/07\/28 00:29:37 roberts Exp $";$/;"	v	file:
rop_connectdb	redis_op.c	/^redisContext* rop_connectdb(char *ip_str, char* port_str, char *pwd)$/;"	f
rop_connectdb_nopwd	redis_op.c	/^redisContext* rop_connectdb_nopwd(char *ip_str, char* port_str)$/;"	f
rop_connectdb_timeout	redis_op.c	/^redisContext* rop_connectdb_timeout(char* ip_str, char *port_str, struct timeval *timeout)$/;"	f
rop_connectdb_unix	redis_op.c	/^redisContext* rop_connectdb_unix(char *sock_path, char *pwd)$/;"	f
rop_create_or_replace_hash_table	redis_op.c	/^int rop_create_or_replace_hash_table(redisContext* conn,$/;"	f
rop_del_key	redis_op.c	/^int rop_del_key(redisContext *conn, char *key)$/;"	f
rop_disconnect	redis_op.c	/^void rop_disconnect(redisContext* conn)$/;"	f
rop_flush_database	redis_op.c	/^int rop_flush_database(redisContext *conn)$/;"	f
rop_get_list_cnt	redis_op.c	/^int rop_get_list_cnt(redisContext *conn, char *key)$/;"	f
rop_hash_set_append	redis_op.c	/^int rop_hash_set_append(redisContext *conn, char *key, RFIELDS fields, RVALUES values, int val_num)$/;"	f
rop_hincrement_one_field	redis_op.c	/^int rop_hincrement_one_field(redisContext *conn, char *key, char *field, unsigned int num)$/;"	f
rop_is_key_exist	redis_op.c	/^int rop_is_key_exist(redisContext *conn, char* key)$/;"	f
rop_list_push	redis_op.c	/^int rop_list_push(redisContext *conn, char *key, char *value)$/;"	f
rop_list_push_append	redis_op.c	/^int rop_list_push_append(redisContext *conn, char *key, RVALUES values, int val_num)$/;"	f
rop_range_list	redis_op.c	/^int rop_range_list(redisContext *conn, char *key, int from_pos, int count, RVALUES values, int *get_num)$/;"	f
rop_redis_append	redis_op.c	/^int rop_redis_append(redisContext *conn, RCOMMANDS cmds, int cmd_num)$/;"	f
rop_redis_command	redis_op.c	/^int rop_redis_command(redisContext *conn, char *cmd)$/;"	f
rop_selectdatabase	redis_op.c	/^int rop_selectdatabase(redisContext *conn, unsigned int db_no)$/;"	f
rop_set_key_lifecycle	redis_op.c	/^int rop_set_key_lifecycle(redisContext *conn, char *key, time_t delete_time)$/;"	f
rop_show_keys	redis_op.c	/^void rop_show_keys(redisContext *conn, char* pattern)$/;"	f
rop_test_reply_type	echo.c	/^void rop_test_reply_type(redisReply *reply)$/;"	f
rop_test_reply_type	redis_op.c	/^void rop_test_reply_type(redisReply *reply)$/;"	f
rop_trim_list	redis_op.c	/^int rop_trim_list(redisContext *conn, char *key, int begin, int end)$/;"	f
rop_zset_get_score	redis_op.c	/^int rop_zset_get_score(redisContext *conn, char *key, char *member)$/;"	f
rop_zset_increment	redis_op.c	/^int rop_zset_increment(redisContext *conn, char* key, char* member)$/;"	f
rop_zset_increment_append	redis_op.c	/^int rop_zset_increment_append(redisContext *conn, char *key, RVALUES values, int val_num)$/;"	f
skip	cJSON.c	/^static const char *skip(const char *in) {while (in && *in && (unsigned char)*in<=32) in++; return in;}$/;"	f	file:
str_replace	util_cgi.c	/^void str_replace(char* strSrc, char* strFind, char* strReplace)$/;"	f
string	cJSON.h	/^	char *string;				\/* The item's name string, if this item is the child of, or is in the list of subitems of an object. *\/$/;"	m	struct:cJSON
suffix_object	cJSON.c	/^static void suffix_object(cJSON *prev,cJSON *item) {prev->next=item;item->prev=prev;}$/;"	f	file:
target	Makefile	/^target=upload data $/;"	m
trim_space	util_cgi.c	/^int trim_space(char *inbuf)$/;"	f
type	cJSON.h	/^	int type;					\/* The type of the item, as above. *\/$/;"	m	struct:cJSON
update	cJSON.c	/^static int update(printbuffer *p)$/;"	f	file:
valuedouble	cJSON.h	/^	double valuedouble;			\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valueint	cJSON.h	/^	int valueint;				\/* The item's number, if type==cJSON_Number *\/$/;"	m	struct:cJSON
valuestring	cJSON.h	/^	char *valuestring;			\/* The item's string, if type==cJSON_String *\/$/;"	m	struct:cJSON
